[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.bom_configuration.update()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\bomConfiguration.dao.ts:28:66

  25 try {
  26   const transaction = connectionObj ? connectionObj : prisma;
  27   const currentDate = new Date();
â†’ 28   const bomConfiguration = await transaction.bom_configuration.update({
         where: {
           bom_configuration_id: null
                                 ~~~~
         },
         data: {
           budget: 0,
           updated_date: new Date('2023-11-03T05:15:00.963Z'),
           updated_by: 1
         }
       })

Argument bom_configuration_id for where.bom_configuration_id must not be null. Please use undefined instead.


[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.bom_configuration.update()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\bomConfiguration.dao.ts:28:66

  25 try {
  26   const transaction = connectionObj ? connectionObj : prisma;
  27   const currentDate = new Date();
â†’ 28   const bomConfiguration = await transaction.bom_configuration.update({
         where: {
           bom_configuration_id: null
                                 ~~~~
         },
         data: {
           budget: 0,
           updated_date: new Date('2023-11-03T05:15:04.267Z'),
           updated_by: 1
         }
       })

Argument bom_configuration_id for where.bom_configuration_id must not be null. Please use undefined instead.


[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.bom_configuration.update()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\bomConfiguration.dao.ts:28:66

  25 try {
  26   const transaction = connectionObj ? connectionObj : prisma;
  27   const currentDate = new Date();
â†’ 28   const bomConfiguration = await transaction.bom_configuration.update({
         where: {
           bom_configuration_id: null
                                 ~~~~
         },
         data: {
           budget: 0,
           updated_date: new Date('2023-11-03T05:15:47.218Z'),
           updated_by: 1
         }
       })

Argument bom_configuration_id for where.bom_configuration_id must not be null. Please use undefined instead.


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getCountByProjectIdAndBomConfigId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getCountByProjectIdAndBomConfigId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getCountByProjectIdAndBomConfigId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getCountByProjectIdAndBomConfigId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getCountByProjectIdAndBomConfigId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getCountByProjectIdAndBomConfigId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getCountByProjectIdAndBomConfigId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getCountByProjectIdAndBomConfigId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\category.dao.ts:94:49

  91 const getById = async (categoryId: number, connectionObj = null) => {
  92   try {
  93     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 94     const category = await transaction.category.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
