[31merror[39m: ERRORS: status code: Error << DETAILS >>/createSubSubCategory << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.sub_sub_category.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\subSubCategory.dao.ts:17:63

  14 const currentDate = new Date();
  15 const transaction = connectionObj !== null ? connectionObj : prisma;
  16 const is_delete = false;
â†’ 17 const subSubCategory = await transaction.sub_sub_category.create(
Foreign key constraint failed on the field: `fk_sub_sub_category_parent_sub_sub_category_id (index)`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllParentData << ERRSTRING >>Error: 
Invalid `transaction.sub_sub_category.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\subSubCategory.dao.ts:285:60

  282 const getAllParentData = async (connectionObj = null) => {
  283   try {
  284     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 285     const subCategory = await transaction.sub_sub_category.findMany({
            where: {
              parent_sub_sub_category_id: null,
              is_delete: false
            },
            include: {
          ?   sub_category?: true,
          ?   parent_data?: true,
              child_date: true,
              ~~~~~~~~~~
          ?   item?: true,
          ?   project_data?: true,
          ?   child_data?: true,
          ?   _count?: true
            }
          })


Unknown field `child_date` for include statement on model sub_sub_category. Available options are listed in green. Did you mean `child_data`?

[31merror[39m: ERRORS: status code: Error << DETAILS >>/createBom << ERRSTRING >>error: null value in column "is_delete" of relation "bom" violates not-null constraint
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategorySubCatAndSubSubCatId << ERRSTRING >>Error: 
Invalid `transaction.bom.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\bom.dao.ts:135:41

  132 const transaction = connectionObj !== null ? connectionObj : prisma;
  133 let result = null;
  134 if (categoryId && subCategoryId && subSubCategoryId) {
â†’ 135   const bom = await transaction.bom.findMany({
          where: {
            category_id: 84,
            sub_category_id: 56,
            sub_sub_category_id: 58,
            is_delete: false
          },
          include: {
            uom_data: true,
            category_data: true,
            sub_category_data: true,
            sub_sub_category_data: true,
            item_data: true
          },
          orderBy: [
            {
              updated_date: 'desc'
              ~~~~~~~~~~~~
            }
          ]
        })

Unknown arg `updated_date` in orderBy.0.updated_date for type bomOrderByWithRelationInput. Did you mean `update_date`? Available args:
type bomOrderByWithRelationInput {
  bom_id?: SortOrder
  bom_name?: SortOrder
  quantity?: SortOrder | SortOrderInput
  uom_id?: SortOrder | SortOrderInput
  category_id?: SortOrder | SortOrderInput
  sub_category_id?: SortOrder | SortOrderInput
  sub_sub_category_id?: SortOrder | SortOrderInput
  item_id?: SortOrder | SortOrderInput
  is_delete?: SortOrder
  create_date?: SortOrder
  update_date?: SortOrder
  created_by?: SortOrder | SortOrderInput
  updated_by?: SortOrder | SortOrderInput
  uom_data?: uomOrderByWithRelationInput
  category_data?: categoryOrderByWithRelationInput
  sub_category_data?: sub_categoryOrderByWithRelationInput
  sub_sub_category_data?: sub_sub_categoryOrderByWithRelationInput
  item_data?: itemOrderByWithRelationInput
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategorySubCatAndSubSubCatId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.bom.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\bom.dao.ts:135:41

  132 const transaction = connectionObj !== null ? connectionObj : prisma;
  133 let result = null;
  134 if (categoryId && subCategoryId && subSubCategoryId) {
â†’ 135   const bom = await transaction.bom.findMany(
The column `bom.created_date` does not exist in the current database.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createVendor << ERRSTRING >>TypeError: Cannot read properties of undefined (reading 'create')
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>Error: 
Invalid `transaction.vendor.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\vendor.dao.ts:179:45

  176 try {
  177   const transaction = connectionObj !== null ? connectionObj : prisma;
  178   const filter = filters.filterVendor;
â†’ 179   const vendor = await transaction.vendor.findMany({
          where: {
            AND: [],
            OR: [
              {
                vendor_name: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_person: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_email: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_phone_no: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                tax_id: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                payment_terms: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                currency: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                lead_time: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                notes: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                vendor_category_data: {
                  master_data_name: {
                    contains: '877',
                    mode: 'insensitive'
                  }
                }
              },
              {
                preferred_payment_method_data: {
                  master_data_name: {
                    contains: '877',
                    mode: 'insensitive'
                  }
                }
              },
              {
                address: {
                  OR: [
                  ~~
                    {
                      city: {
                        contains: '877',
                        mode: 'insensitive'
                      }
                    },
                    {
                      state: {
                        contains: '877',
                        mode: 'insensitive'
                      }
                    },
                    {
                      street: {
                        contains: '877',
                        mode: 'insensitive'
                      }
                    },
                    {
                      country: {
                        contains: '877',
                        mode: 'insensitive'
                      }
                    },
                    {
                      postal_code: {
                        contains: '877',
                        mode: 'insensitive'
                      }
                    }
                  ]
                }
              }
            ],
            is_delete: false
          },
          include: {
            vendor_category_data: true,
            preferred_payment_method_data: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `OR` in where.OR.11.address.OR for type JsonNullableFilter. Did you mean `lt`? Available args:
type JsonNullableFilter {
  equals?: Json | JsonNullValueFilter
  path?: List<String>
  string_contains?: String
  string_starts_with?: String
  string_ends_with?: String
  array_contains?: Json | Null
  array_starts_with?: Json | Null
  array_ends_with?: Json | Null
  lt?: Json
  lte?: Json
  gt?: Json
  gte?: Json
  not?: Json | JsonNullValueFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>Error: 
Invalid `transaction.vendor.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\vendor.dao.ts:179:45

  176 try {
  177   const transaction = connectionObj !== null ? connectionObj : prisma;
  178   const filter = filters.filterVendor;
â†’ 179   const vendor = await transaction.vendor.findMany({
          where: {
            AND: [],
            OR: [
              {
                vendor_name: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_person: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_email: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_phone_no: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                tax_id: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                payment_terms: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                currency: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                lead_time: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                notes: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                vendor_category_data: {
                  master_data_name: {
                    contains: '877',
                    mode: 'insensitive'
                  }
                }
              },
              {
                preferred_payment_method_data: {
                  master_data_name: {
                    contains: '877',
                    mode: 'insensitive'
                  }
                }
              },
              {
                OR: [
                  {
                    'address.city': {
                      contains: '877',
                      mode: 'insensitive'
                    }
                  },
                  {
                    'address.state': {
                      contains: '877',
                      mode: 'insensitive'
                    }
                  },
                  {
                    'address.street': {
                      contains: '877',
                      mode: 'insensitive'
                    }
                  },
                  {
                    'address.country': {
                      contains: '877',
                      mode: 'insensitive'
                    }
                  },
                  {
                    'address.postal_code': {
                      contains: '877',
                      mode: 'insensitive'
                    }
                  }
                ]
              }
            ],
            is_delete: false
          },
          include: {
            vendor_category_data: true,
            preferred_payment_method_data: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `address.city` in where.OR.11.OR.0.address.city for type vendorWhereInput. Did you mean `address`? Available args:
type vendorWhereInput {
  AND?: vendorWhereInput | List<vendorWhereInput>
  OR?: List<vendorWhereInput>
  NOT?: vendorWhereInput | List<vendorWhereInput>
  vendor_id?: IntFilter | Int
  vendor_name?: StringFilter | String
  contact_person?: StringNullableFilter | String | Null
  contact_email?: StringNullableFilter | String | Null
  contact_phone_no?: StringNullableFilter | String | Null
  address?: JsonNullableFilter
  tax_id?: StringNullableFilter | String | Null
  payment_terms?: StringNullableFilter | String | Null
  preferred_payment_method_id?: IntNullableFilter | Int | Null
  bank_account_details?: JsonNullableFilter
  currency?: StringNullableFilter | String | Null
  vendor_category_id?: IntNullableFilter | Int | Null
  lead_time?: StringNullableFilter | String | Null
  minimum_order_quantity?: IntNullableFilter | Int | Null
  notes?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  vendor_category_data?: Master_dataRelationFilter | master_dataWhereInput | Null
  preferred_payment_method_data?: Master_dataRelationFilter | master_dataWhereInput | Null
}
Unknown arg `address.state` in where.OR.11.OR.1.address.state for type vendorWhereInput. Available args:

type vendorWhereInput {
  AND?: vendorWhereInput | List<vendorWhereInput>
  OR?: List<vendorWhereInput>
  NOT?: vendorWhereInput | List<vendorWhereInput>
  vendor_id?: IntFilter | Int
  vendor_name?: StringFilter | String
  contact_person?: StringNullableFilter | String | Null
  contact_email?: StringNullableFilter | String | Null
  contact_phone_no?: StringNullableFilter | String | Null
  address?: JsonNullableFilter
  tax_id?: StringNullableFilter | String | Null
  payment_terms?: StringNullableFilter | String | Null
  preferred_payment_method_id?: IntNullableFilter | Int | Null
  bank_account_details?: JsonNullableFilter
  currency?: StringNullableFilter | String | Null
  vendor_category_id?: IntNullableFilter | Int | Null
  lead_time?: StringNullableFilter | String | Null
  minimum_order_quantity?: IntNullableFilter | Int | Null
  notes?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  vendor_category_data?: Master_dataRelationFilter | master_dataWhereInput | Null
  preferred_payment_method_data?: Master_dataRelationFilter | master_dataWhereInput | Null
}
Unknown arg `address.street` in where.OR.11.OR.2.address.street for type vendorWhereInput. Available args:

type vendorWhereInput {
  AND?: vendorWhereInput | List<vendorWhereInput>
  OR?: List<vendorWhereInput>
  NOT?: vendorWhereInput | List<vendorWhereInput>
  vendor_id?: IntFilter | Int
  vendor_name?: StringFilter | String
  contact_person?: StringNullableFilter | String | Null
  contact_email?: StringNullableFilter | String | Null
  contact_phone_no?: StringNullableFilter | String | Null
  address?: JsonNullableFilter
  tax_id?: StringNullableFilter | String | Null
  payment_terms?: StringNullableFilter | String | Null
  preferred_payment_method_id?: IntNullableFilter | Int | Null
  bank_account_details?: JsonNullableFilter
  currency?: StringNullableFilter | String | Null
  vendor_category_id?: IntNullableFilter | Int | Null
  lead_time?: StringNullableFilter | String | Null
  minimum_order_quantity?: IntNullableFilter | Int | Null
  notes?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  vendor_category_data?: Master_dataRelationFilter | master_dataWhereInput | Null
  preferred_payment_method_data?: Master_dataRelationFilter | master_dataWhereInput | Null
}
Unknown arg `address.country` in where.OR.11.OR.3.address.country for type vendorWhereInput. Available args:

type vendorWhereInput {
  AND?: vendorWhereInput | List<vendorWhereInput>
  OR?: List<vendorWhereInput>
  NOT?: vendorWhereInput | List<vendorWhereInput>
  vendor_id?: IntFilter | Int
  vendor_name?: StringFilter | String
  contact_person?: StringNullableFilter | String | Null
  contact_email?: StringNullableFilter | String | Null
  contact_phone_no?: StringNullableFilter | String | Null
  address?: JsonNullableFilter
  tax_id?: StringNullableFilter | String | Null
  payment_terms?: StringNullableFilter | String | Null
  preferred_payment_method_id?: IntNullableFilter | Int | Null
  bank_account_details?: JsonNullableFilter
  currency?: StringNullableFilter | String | Null
  vendor_category_id?: IntNullableFilter | Int | Null
  lead_time?: StringNullableFilter | String | Null
  minimum_order_quantity?: IntNullableFilter | Int | Null
  notes?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  vendor_category_data?: Master_dataRelationFilter | master_dataWhereInput | Null
  preferred_payment_method_data?: Master_dataRelationFilter | master_dataWhereInput | Null
}
Unknown arg `address.postal_code` in where.OR.11.OR.4.address.postal_code for type vendorWhereInput. Available args:

type vendorWhereInput {
  AND?: vendorWhereInput | List<vendorWhereInput>
  OR?: List<vendorWhereInput>
  NOT?: vendorWhereInput | List<vendorWhereInput>
  vendor_id?: IntFilter | Int
  vendor_name?: StringFilter | String
  contact_person?: StringNullableFilter | String | Null
  contact_email?: StringNullableFilter | String | Null
  contact_phone_no?: StringNullableFilter | String | Null
  address?: JsonNullableFilter
  tax_id?: StringNullableFilter | String | Null
  payment_terms?: StringNullableFilter | String | Null
  preferred_payment_method_id?: IntNullableFilter | Int | Null
  bank_account_details?: JsonNullableFilter
  currency?: StringNullableFilter | String | Null
  vendor_category_id?: IntNullableFilter | Int | Null
  lead_time?: StringNullableFilter | String | Null
  minimum_order_quantity?: IntNullableFilter | Int | Null
  notes?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  vendor_category_data?: Master_dataRelationFilter | master_dataWhereInput | Null
  preferred_payment_method_data?: Master_dataRelationFilter | master_dataWhereInput | Null
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>Error: 
Invalid `transaction.vendor.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\vendor.dao.ts:179:45

  176 try {
  177   const transaction = connectionObj !== null ? connectionObj : prisma;
  178   const filter = filters.filterVendor;
â†’ 179   const vendor = await transaction.vendor.findMany({
          where: {
            AND: [],
            OR: [
              {
                vendor_name: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_person: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_email: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_phone_no: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                tax_id: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                payment_terms: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                currency: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                lead_time: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                notes: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                vendor_category_data: {
                  master_data_name: {
                    contains: '877',
                    mode: 'insensitive'
                  }
                }
              },
              {
                preferred_payment_method_data: {
                  master_data_name: {
                    contains: '877',
                    mode: 'insensitive'
                  }
                }
              },
              {
                OR: [
                  {
                    'address.city': {
                      contains: '877',
                      mode: 'insensitive'
                    }
                  },
                  {
                    'address.state': {
                      contains: '877',
                      mode: 'insensitive'
                    }
                  },
                  {
                    'address.street': {
                      contains: '877',
                      mode: 'insensitive'
                    }
                  },
                  {
                    'address.country': {
                      contains: '877',
                      mode: 'insensitive'
                    }
                  },
                  {
                    'address.postal_code': {
                      contains: '877',
                      mode: 'insensitive'
                    }
                  }
                ]
              }
            ],
            is_delete: false
          },
          include: {
            vendor_category_data: true,
            preferred_payment_method_data: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `address.city` in where.OR.11.OR.0.address.city for type vendorWhereInput. Did you mean `address`? Available args:
type vendorWhereInput {
  AND?: vendorWhereInput | List<vendorWhereInput>
  OR?: List<vendorWhereInput>
  NOT?: vendorWhereInput | List<vendorWhereInput>
  vendor_id?: IntFilter | Int
  vendor_name?: StringFilter | String
  contact_person?: StringNullableFilter | String | Null
  contact_email?: StringNullableFilter | String | Null
  contact_phone_no?: StringNullableFilter | String | Null
  address?: JsonNullableFilter
  tax_id?: StringNullableFilter | String | Null
  payment_terms?: StringNullableFilter | String | Null
  preferred_payment_method_id?: IntNullableFilter | Int | Null
  bank_account_details?: JsonNullableFilter
  currency?: StringNullableFilter | String | Null
  vendor_category_id?: IntNullableFilter | Int | Null
  lead_time?: StringNullableFilter | String | Null
  minimum_order_quantity?: IntNullableFilter | Int | Null
  notes?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  vendor_category_data?: Master_dataRelationFilter | master_dataWhereInput | Null
  preferred_payment_method_data?: Master_dataRelationFilter | master_dataWhereInput | Null
}
Unknown arg `address.state` in where.OR.11.OR.1.address.state for type vendorWhereInput. Available args:

type vendorWhereInput {
  AND?: vendorWhereInput | List<vendorWhereInput>
  OR?: List<vendorWhereInput>
  NOT?: vendorWhereInput | List<vendorWhereInput>
  vendor_id?: IntFilter | Int
  vendor_name?: StringFilter | String
  contact_person?: StringNullableFilter | String | Null
  contact_email?: StringNullableFilter | String | Null
  contact_phone_no?: StringNullableFilter | String | Null
  address?: JsonNullableFilter
  tax_id?: StringNullableFilter | String | Null
  payment_terms?: StringNullableFilter | String | Null
  preferred_payment_method_id?: IntNullableFilter | Int | Null
  bank_account_details?: JsonNullableFilter
  currency?: StringNullableFilter | String | Null
  vendor_category_id?: IntNullableFilter | Int | Null
  lead_time?: StringNullableFilter | String | Null
  minimum_order_quantity?: IntNullableFilter | Int | Null
  notes?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  vendor_category_data?: Master_dataRelationFilter | master_dataWhereInput | Null
  preferred_payment_method_data?: Master_dataRelationFilter | master_dataWhereInput | Null
}
Unknown arg `address.street` in where.OR.11.OR.2.address.street for type vendorWhereInput. Available args:

type vendorWhereInput {
  AND?: vendorWhereInput | List<vendorWhereInput>
  OR?: List<vendorWhereInput>
  NOT?: vendorWhereInput | List<vendorWhereInput>
  vendor_id?: IntFilter | Int
  vendor_name?: StringFilter | String
  contact_person?: StringNullableFilter | String | Null
  contact_email?: StringNullableFilter | String | Null
  contact_phone_no?: StringNullableFilter | String | Null
  address?: JsonNullableFilter
  tax_id?: StringNullableFilter | String | Null
  payment_terms?: StringNullableFilter | String | Null
  preferred_payment_method_id?: IntNullableFilter | Int | Null
  bank_account_details?: JsonNullableFilter
  currency?: StringNullableFilter | String | Null
  vendor_category_id?: IntNullableFilter | Int | Null
  lead_time?: StringNullableFilter | String | Null
  minimum_order_quantity?: IntNullableFilter | Int | Null
  notes?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  vendor_category_data?: Master_dataRelationFilter | master_dataWhereInput | Null
  preferred_payment_method_data?: Master_dataRelationFilter | master_dataWhereInput | Null
}
Unknown arg `address.country` in where.OR.11.OR.3.address.country for type vendorWhereInput. Available args:

type vendorWhereInput {
  AND?: vendorWhereInput | List<vendorWhereInput>
  OR?: List<vendorWhereInput>
  NOT?: vendorWhereInput | List<vendorWhereInput>
  vendor_id?: IntFilter | Int
  vendor_name?: StringFilter | String
  contact_person?: StringNullableFilter | String | Null
  contact_email?: StringNullableFilter | String | Null
  contact_phone_no?: StringNullableFilter | String | Null
  address?: JsonNullableFilter
  tax_id?: StringNullableFilter | String | Null
  payment_terms?: StringNullableFilter | String | Null
  preferred_payment_method_id?: IntNullableFilter | Int | Null
  bank_account_details?: JsonNullableFilter
  currency?: StringNullableFilter | String | Null
  vendor_category_id?: IntNullableFilter | Int | Null
  lead_time?: StringNullableFilter | String | Null
  minimum_order_quantity?: IntNullableFilter | Int | Null
  notes?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  vendor_category_data?: Master_dataRelationFilter | master_dataWhereInput | Null
  preferred_payment_method_data?: Master_dataRelationFilter | master_dataWhereInput | Null
}
Unknown arg `address.postal_code` in where.OR.11.OR.4.address.postal_code for type vendorWhereInput. Available args:

type vendorWhereInput {
  AND?: vendorWhereInput | List<vendorWhereInput>
  OR?: List<vendorWhereInput>
  NOT?: vendorWhereInput | List<vendorWhereInput>
  vendor_id?: IntFilter | Int
  vendor_name?: StringFilter | String
  contact_person?: StringNullableFilter | String | Null
  contact_email?: StringNullableFilter | String | Null
  contact_phone_no?: StringNullableFilter | String | Null
  address?: JsonNullableFilter
  tax_id?: StringNullableFilter | String | Null
  payment_terms?: StringNullableFilter | String | Null
  preferred_payment_method_id?: IntNullableFilter | Int | Null
  bank_account_details?: JsonNullableFilter
  currency?: StringNullableFilter | String | Null
  vendor_category_id?: IntNullableFilter | Int | Null
  lead_time?: StringNullableFilter | String | Null
  minimum_order_quantity?: IntNullableFilter | Int | Null
  notes?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  vendor_category_data?: Master_dataRelationFilter | master_dataWhereInput | Null
  preferred_payment_method_data?: Master_dataRelationFilter | master_dataWhereInput | Null
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>Error: 
Invalid `transaction.vendor.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\vendor.dao.ts:179:45

  176 try {
  177   const transaction = connectionObj !== null ? connectionObj : prisma;
  178   const filter = filters.filterVendor;
â†’ 179   const vendor = await transaction.vendor.findMany({
          where: {
            AND: [],
            OR: [
              {
                vendor_name: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_person: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_email: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_phone_no: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                tax_id: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                payment_terms: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                currency: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                lead_time: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                notes: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                vendor_category_data: {
                  master_data_name: {
                    contains: '877',
                    mode: 'insensitive'
                  }
                }
              },
              {
                preferred_payment_method_data: {
                  master_data_name: {
                    contains: '877',
                    mode: 'insensitive'
                  }
                }
              },
              {
                address: {
                  contains: '877',
                  ~~~~~~~~
                  mode: 'insensitive'
                  ~~~~
                }
              }
            ],
            is_delete: false
          },
          include: {
            vendor_category_data: true,
            preferred_payment_method_data: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `contains` in where.OR.11.address.contains for type JsonNullableFilter. Available args:

type JsonNullableFilter {
  equals?: Json | JsonNullValueFilter
  path?: List<String>
  string_contains?: String
  string_starts_with?: String
  string_ends_with?: String
  array_contains?: Json | Null
  array_starts_with?: Json | Null
  array_ends_with?: Json | Null
  lt?: Json
  lte?: Json
  gt?: Json
  gte?: Json
  not?: Json | JsonNullValueFilter
}
Unknown arg `mode` in where.OR.11.address.mode for type JsonNullableFilter. Did you mean `lte`? Available args:
type JsonNullableFilter {
  equals?: Json | JsonNullValueFilter
  path?: List<String>
  string_contains?: String
  string_starts_with?: String
  string_ends_with?: String
  array_contains?: Json | Null
  array_starts_with?: Json | Null
  array_ends_with?: Json | Null
  lt?: Json
  lte?: Json
  gt?: Json
  gte?: Json
  not?: Json | JsonNullValueFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>Error: 
Invalid `transaction.vendor.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\vendor.dao.ts:179:45

  176 try {
  177   const transaction = connectionObj !== null ? connectionObj : prisma;
  178   const filter = filters.filterVendor;
â†’ 179   const vendor = await transaction.vendor.findMany({
          where: {
            AND: [],
            OR: [
              {
                vendor_name: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_person: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_email: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                contact_phone_no: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                tax_id: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                payment_terms: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                currency: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                lead_time: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                notes: {
                  contains: '877',
                  mode: 'insensitive'
                }
              },
              {
                vendor_category_data: {
                  master_data_name: {
                    contains: '877',
                    mode: 'insensitive'
                  }
                }
              },
              {
                preferred_payment_method_data: {
                  master_data_name: {
                    contains: '877',
                    mode: 'insensitive'
                  }
                }
              },
              {
                address: {
                  contains: '877'
                  ~~~~~~~~
                }
              }
            ],
            is_delete: false
          },
          include: {
            vendor_category_data: true,
            preferred_payment_method_data: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `contains` in where.OR.11.address.contains for type JsonNullableFilter. Available args:

type JsonNullableFilter {
  equals?: Json | JsonNullValueFilter
  path?: List<String>
  string_contains?: String
  string_starts_with?: String
  string_ends_with?: String
  array_contains?: Json | Null
  array_starts_with?: Json | Null
  array_ends_with?: Json | Null
  lt?: Json
  lte?: Json
  gt?: Json
  gte?: Json
  not?: Json | JsonNullValueFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllItem << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.item.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\item.dao.ts:68:42

  65 const filter = filters.filterItem;
  66 const totalCount = await transaction.item.count({});
  67 
â†’ 68 const items = await transaction.item.findMany(
The column `item.sub_sub_category_id` does not exist in the current database.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllItem << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.item.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\item.dao.ts:68:42

  65 const filter = filters.filterItem;
  66 const totalCount = await transaction.item.count({});
  67 
â†’ 68 const items = await transaction.item.findMany(
The column `item.sub_sub_categorySub_sub_category_id` does not exist in the current database.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllItem << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.item.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\item.dao.ts:68:42

  65 const filter = filters.filterItem;
  66 const totalCount = await transaction.item.count({});
  67 
â†’ 68 const items = await transaction.item.findMany(
The column `item.sub_sub_categorySub_sub_category_id` does not exist in the current database.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllItem << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.item.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\item.dao.ts:68:42

  65 const filter = filters.filterItem;
  66 const totalCount = await transaction.item.count({});
  67 
â†’ 68 const items = await transaction.item.findMany(
The column `item.sub_sub_categorySub_sub_category_id` does not exist in the current database.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllItem << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.item.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\item.dao.ts:68:42

  65 const filter = filters.filterItem;
  66 const totalCount = await transaction.item.count({});
  67 
â†’ 68 const items = await transaction.item.findMany(
The column `item.sub_sub_categorySub_sub_category_id` does not exist in the current database.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addItem << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.item.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\item.dao.ts:19:41

  16 try {
  17   const currentDate = new Date();
  18   const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 19   const item = await transaction.item.create(
The column `item.sub_sub_categorySub_sub_category_id` does not exist in the current database.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addItem << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.item.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\item.dao.ts:19:41

  16 try {
  17   const currentDate = new Date();
  18   const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 19   const item = await transaction.item.create(
The column `item.sub_sub_categorySub_sub_category_id` does not exist in the current database.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addItem << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.item.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\item.dao.ts:19:41

  16 try {
  17   const currentDate = new Date();
  18   const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 19   const item = await transaction.item.create(
Foreign key constraint failed on the field: `fk_item_type_id (index)`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByItemId << ERRSTRING >>Error: 
Invalid `transaction.item.findUnique()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\item.dao.ts:149:41

  146 const getById = async (item_id: number, connectionObj = null) => {
  147   try {
  148     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 149     const item = await transaction.item.findUnique({
            where: {
              item_id: 157,
              is_delete: false
              ~~~~~~~~~
            },
            ~~~~~~~~~~~~~~~~~~
            include: {
              gst: {
                select: {
                  rate: true
                }
              },
              hsn_code: {
                select: {
                  code: true
                }
              },
              uom: {
                select: {
                  name: true
                }
              },
              item_type: {
                select: {
                  master_data_name: true
                }
              },
              brand: {
                select: {
                  brand_name: true
                }
              }
            }
          })

Argument where of type itemWhereUniqueInput needs exactly one argument, but you provided item_id and is_delete. Please choose one. Available args: 
type itemWhereUniqueInput {
  item_id?: Int
}
Unknown arg `is_delete` in where.is_delete for type itemWhereUniqueInput. Did you mean `select`? Available args:
type itemWhereUniqueInput {
  item_id?: Int
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByItemId << ERRSTRING >>Error: 
Invalid `transaction.item.findFirst()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\item.dao.ts:149:41

  146 const getById = async (item_id: number, connectionObj = null) => {
  147   try {
  148     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 149     const item = await transaction.item.findFirst({
            where: {
              item_id: 157,
              is_delete: false
              ~~~~~~~~~
            },
            include: {
              gst: {
                select: {
                  rate: true
                }
              },
              hsn_code: {
                select: {
                  code: true
                }
              },
              uom: {
                select: {
                  name: true
                }
              },
              item_type: {
                select: {
                  master_data_name: true
                }
              },
              brand: {
                select: {
                  brand_name: true
                }
              }
            }
          })

Unknown arg `is_delete` in where.is_delete for type itemWhereInput. Did you mean `select`? Available args:
type itemWhereInput {
  AND?: itemWhereInput | List<itemWhereInput>
  OR?: List<itemWhereInput>
  NOT?: itemWhereInput | List<itemWhereInput>
  item_id?: IntFilter | Int
  item_name?: StringFilter | String
  description?: StringNullableFilter | String | Null
  hsn_code_id?: IntNullableFilter | Int | Null
  gst_id?: IntNullableFilter | Int | Null
  uom_id?: IntNullableFilter | Int | Null
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  item_type_id?: IntNullableFilter | Int | Null
  brand_id?: IntNullableFilter | Int | Null
  hsn_code?: Hsn_codeRelationFilter | hsn_codeWhereInput | Null
  gst?: GstRelationFilter | gstWhereInput | Null
  uom?: UomRelationFilter | uomWhereInput | Null
  item_type?: Master_dataRelationFilter | master_dataWhereInput | Null
  brand?: BrandRelationFilter | brandWhereInput | Null
  lead_enquiry_product_item?: Lead_enquiry_product_itemListRelationFilter
  bom?: BomListRelationFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.bom.createMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\bom.dao.ts:317:39

  314 const addBulk = async (bulkBom: bomBody[], connectionObj = null) => {
  315   try {
  316     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 317     const bom = await transaction.bom.createMany({
            data: [
              {
                created_date: new Date('2023-09-04T12:59:39.421Z'),
                updated_date: new Date('2023-09-04T12:59:39.421Z'),
                created_by: 1,
                updated_by: null,
                is_delete: false,
                bom_name: 'Cement',
                item_id: 165,
                uom_id: 6,
                description: 'Cement Description',
                ~~~~~~~~~~~
                quantity: 100,
                rate: 500,
                ~~~~
                total: 50000,
                ~~~~~
                sub_category_id: 62,
                bom_type: 'RAWMT'
                ~~~~~~~~
              }
            ]
          })

Unknown arg `description` in data.0.description for type bomCreateManyInput. Did you mean `quantity`? Available args:
type bomCreateManyInput {
  bom_id?: Int
  bom_name: String
  quantity?: Int | Null
  uom_id?: Int | Null
  category_id?: Int | Null
  sub_category_id?: Int | Null
  sub_sub_category_id?: Int | Null
  item_id?: Int | Null
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
}
Unknown arg `rate` in data.0.rate for type bomCreateManyInput. Available args:

type bomCreateManyInput {
  bom_id?: Int
  bom_name: String
  quantity?: Int | Null
  uom_id?: Int | Null
  category_id?: Int | Null
  sub_category_id?: Int | Null
  sub_sub_category_id?: Int | Null
  item_id?: Int | Null
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
}
Unknown arg `total` in data.0.total for type bomCreateManyInput. Did you mean `bom_id`? Available args:
type bomCreateManyInput {
  bom_id?: Int
  bom_name: String
  quantity?: Int | Null
  uom_id?: Int | Null
  category_id?: Int | Null
  sub_category_id?: Int | Null
  sub_sub_category_id?: Int | Null
  item_id?: Int | Null
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
}
Unknown arg `bom_type` in data.0.bom_type for type bomCreateManyInput. Did you mean `bom_name`? Available args:
type bomCreateManyInput {
  bom_id?: Int
  bom_name: String
  quantity?: Int | Null
  uom_id?: Int | Null
  category_id?: Int | Null
  sub_category_id?: Int | Null
  sub_sub_category_id?: Int | Null
  item_id?: Int | Null
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.bom.createMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\bom.dao.ts:317:39

  314 const addBulk = async (bulkBom: bomBody[], connectionObj = null) => {
  315   try {
  316     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 317     const bom = await transaction.bom.createMany({
            data: [
              {
                created_date: new Date('2023-09-05T04:17:09.283Z'),
                updated_date: new Date('2023-09-05T04:17:09.283Z'),
                created_by: 1,
                updated_by: null,
                is_delete: false,
                bom_name: 'Sand',
                item_id: 165,
                uom_id: 6,
                description: 'Sand Description',
                quantity: 100,
                rate: 500,
                total: 50000,
                sub_category_id: 62,
                bom_type: 'RAWMT'
              }
            ],
            returning: {
            ~~~~~~~~~
              bom_id: true,
              bom_name: true,
              created_date: true,
              updated_date: true,
              created_by: true,
              updated_by: true,
              is_delete: true,
              item_id: true,
              uom_id: true,
              description: true,
              quantity: true,
              rate: true,
              total: true,
              sub_category_id: true,
              bom_type: true
            }
          })

Unknown arg `returning` in returning for type AffectedRowsOutput. Did you mean `data`? Available args:
type createManybom {
  data: bomCreateManyInput | List<bomCreateManyInput>
  skipDuplicates?: Boolean
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.bom.createMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\bom.dao.ts:317:39

  314 const addBulk = async (bulkBom: bomBody[], connectionObj = null) => {
  315   try {
  316     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 317     const bom = await transaction.bom.createMany({
            data: [
              {
                created_date: new Date('2023-09-05T04:29:47.199Z'),
                updated_date: new Date('2023-09-05T04:29:47.199Z'),
                created_by: 1,
                updated_by: null,
                is_delete: false,
                bom_name: 'Sand',
                item_id: 165,
                uom_id: 6,
                description: 'Sand Description',
                quantity: 100,
                rate: 500,
                total: 50000,
                sub_category_id: 62,
                bom_type: 'RAWMT'
              },
              {
                created_date: new Date('2023-09-05T04:29:47.199Z'),
                updated_date: new Date('2023-09-05T04:29:47.199Z'),
                created_by: 1,
                updated_by: null,
                is_delete: false,
                bom_name: 'Brick',
                item_id: 165,
                uom_id: 6,
                description: 'Brick Description',
                quantity: 100,
                rate: 500,
                total: 50000,
                sub_category_id: 62,
                bom_type: 'RAWMT'
              }
            ],
            returning: {
            ~~~~~~~~~
              bom_id: true,
              bom_name: true,
              created_date: true,
              updated_date: true,
              created_by: true,
              updated_by: true,
              is_delete: true,
              item_id: true,
              uom_id: true,
              description: true,
              quantity: true,
              rate: true,
              total: true,
              sub_category_id: true,
              bom_type: true
            }
          })

Unknown arg `returning` in returning for type AffectedRowsOutput. Did you mean `data`? Available args:
type createManybom {
  data: bomCreateManyInput | List<bomCreateManyInput>
  skipDuplicates?: Boolean
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/createBom << ERRSTRING >>TypeError: Cannot read properties of undefined (reading 'create')
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createCategory << ERRSTRING >>PrismaClientInitializationError: 
Invalid `prisma.$queryRaw()` invocation:


Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createCategory << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.category.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\category.dao.ts:25:49

  22 if (end_date) {
  23   formatted_end_date = new Date(end_date);
  24 }
â†’ 25 const category = await transaction.category.create(
Foreign key constraint failed on the field: `fk_category_project_id (index)`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createCategory << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.category.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\category.dao.ts:19:49

  16 const is_delete = false;
  17 const formatted_start_date = start_date ? new Date(start_date) : null;
  18 const formatted_end_date = end_date ? new Date(end_date) : null;
â†’ 19 const category = await transaction.category.create(
Foreign key constraint failed on the field: `fk_category_project_id (index)`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.sub_category.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\subCategory.dao.ts:59:56

  56 const formatted_start_date = start_date ? new Date(start_date) : null;
  57 const formatted_end_date = end_date ? new Date(end_date) : null;
  58 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 59 const subCategory = await transaction.sub_category.update({
       where: {
         sub_category_id: 72
       },
       data: {
         name: null,
               ~~~~
         category_id: null,
         budget: 50000,
         updated_by: null,
         updated_date: new Date('2023-09-05T08:50:32.760Z'),
         description: null,
         project_id: null,
         start_date: null,
         end_date: null
       }
     })

Argument name for data.name must not be null. Please use undefined instead.


[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.bom.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\bom.dao.ts:393:49

  390     bomData.push(bomResult);
  391   }
  392 } else if (is_delete === false) {
â†’ 393   const bomResult = await transaction.bom.create(
Foreign key constraint failed on the field: `fk_bom_sub_category_id (index)`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.bom.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\bom.dao.ts:393:49

  390     bomData.push(bomResult);
  391   }
  392 } else if (is_delete === false) {
â†’ 393   const bomResult = await transaction.bom.create(
Foreign key constraint failed on the field: `fk_bom_sub_category_id (index)`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createLabour << ERRSTRING >>PrismaClientUnknownRequestError: 
Invalid `transaction.labour.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\labour.dao.ts:16:45

  13 const currentDate = new Date();
  14 const is_delete = false;
  15 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 16 const labour = await transaction.labour.create(
Error occurred during query execution:
ConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(Error { kind: Db, cause: Some(DbError { severity: "ERROR", parsed_severity: Some(Error), code: SqlState(E42601), message: "cannot insert into column \"total\"", detail: Some("Column \"total\" is a generated column."), hint: None, position: None, where_: None, schema: None, table: None, column: None, datatype: None, constraint: None, file: Some("rewriteHandler.c"), line: Some(874), routine: Some("rewriteTargetListIU") }) }), transient: false })
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createLabour << ERRSTRING >>PrismaClientUnknownRequestError: 
Invalid `transaction.labour.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\labour.dao.ts:16:45

  13 const currentDate = new Date();
  14 const is_delete = false;
  15 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 16 const labour = await transaction.labour.create(
Error occurred during query execution:
ConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(Error { kind: Db, cause: Some(DbError { severity: "ERROR", parsed_severity: Some(Error), code: SqlState(E42601), message: "cannot insert into column \"total\"", detail: Some("Column \"total\" is a generated column."), hint: None, position: None, where_: None, schema: None, table: None, column: None, datatype: None, constraint: None, file: Some("rewriteHandler.c"), line: Some(874), routine: Some("rewriteTargetListIU") }) }), transient: false })
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createLabour << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.labour.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\labour.dao.ts:14:45

  11 const currentDate = new Date();
  12 const is_delete = false;
  13 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 14 const labour = await transaction.labour.create(
The column `rate` does not exist in the current database.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByMachineryId << ERRSTRING >>Error: 
Invalid `transaction.machinery.findFirst()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\machinery.dao.ts:122:51

  119 const getById = async (machinery_id: number, connectionObj = null) => {
  120   try {
  121     const transaction = connectionObj ? connectionObj : prisma;
â†’ 122     const machinery = await transaction.machinery.findFirst({
            where: {
              machinery_id: NaN,
                            ~~~
              is_delete: false
            },
            include: {
              uom_data: true
            }
          })

Argument machinery_id: Got invalid value NaN on prisma.findFirstmachinery. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByMachineryId << ERRSTRING >>Error: 
Invalid `transaction.machinery.findFirst()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\machinery.dao.ts:122:51

  119 const getById = async (machinery_id: number, connectionObj = null) => {
  120   try {
  121     const transaction = connectionObj ? connectionObj : prisma;
â†’ 122     const machinery = await transaction.machinery.findFirst({
            where: {
              machinery_id: NaN,
                            ~~~
              is_delete: false
            },
            include: {
              uom_data: true
            }
          })

Argument machinery_id: Got invalid value NaN on prisma.findFirstmachinery. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getBomTotalBySubCategoryId << ERRSTRING >>Error: 
Invalid `transaction.bom.aggregate()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\bom.dao.ts:490:42

  487 ) => {
  488   try {
  489     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 490     const result = await transaction.bom.aggregate({
            _sum: {
              total: true
            },
            where: {
              sub_category_id: 72
            },
            _sumRawmt: {
            ~~~~~~~~~
              total: {
                _eq: 'RAWMT'
              }
            },
            _sumLabor: {
            ~~~~~~~~~
              total: {
                _eq: 'LABOR'
              }
            },
            _sumMcnry: {
            ~~~~~~~~~
              total: {
                _eq: 'MCNRY'
              }
            }
          })

Unknown arg `_sumRawmt` in _sumRawmt for type AggregateBom. Did you mean `select`? Available args:
type aggregatebom {
  where?: bomWhereInput
  orderBy?: List<bomOrderByWithRelationInput> | bomOrderByWithRelationInput
  cursor?: bomWhereUniqueInput
  take?: Int
  skip?: Int
}
Unknown arg `_sumLabor` in _sumLabor for type AggregateBom. Did you mean `cursor`? Available args:
type aggregatebom {
  where?: bomWhereInput
  orderBy?: List<bomOrderByWithRelationInput> | bomOrderByWithRelationInput
  cursor?: bomWhereUniqueInput
  take?: Int
  skip?: Int
}
Unknown arg `_sumMcnry` in _sumMcnry for type AggregateBom. Did you mean `cursor`? Available args:
type aggregatebom {
  where?: bomWhereInput
  orderBy?: List<bomOrderByWithRelationInput> | bomOrderByWithRelationInput
  cursor?: bomWhereUniqueInput
  take?: Int
  skip?: Int
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.sub_category.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\subCategory.dao.ts:277:63

  274 try {
  275   const transaction = connectionObj ? connectionObj : prisma;
  276   const currentDate = new Date();
â†’ 277   const subCategoryDetails = await transaction.sub_category.update({
          where: {
            sub_category_id: 72
          },
          data: {
            budget: NaN,
                    ~~~
            updated_date: new Date("2023-09-06T13:59:11.764Z"),
            updated_by: 1
          }
        })

Argument `budget`: Invalid value provided. Expected Float, NullableFloatFieldUpdateOperationsInput, Null, Float, NullableFloatFieldUpdateOperationsInput or Null, provided Enum.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.sub_category.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\subCategory.dao.ts:277:63

  274 try {
  275   const transaction = connectionObj ? connectionObj : prisma;
  276   const currentDate = new Date();
â†’ 277   const subCategoryDetails = await transaction.sub_category.update({
          where: {
            sub_category_id: 72
          },
          data: {
            budget: NaN,
                    ~~~
            updated_date: new Date("2023-09-06T14:00:39.340Z"),
            updated_by: 1
          }
        })

Argument `budget`: Invalid value provided. Expected Float, NullableFloatFieldUpdateOperationsInput, Null, Float, NullableFloatFieldUpdateOperationsInput or Null, provided Enum.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.sub_category.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\subCategory.dao.ts:279:63

  276 const currentDate = new Date();
  277 console.log('budget', budget);
  278 
â†’ 279 const subCategoryDetails = await transaction.sub_category.update({
        where: {
          sub_category_id: 72
        },
        data: {
          budget: NaN,
                  ~~~
          updated_date: new Date("2023-09-06T14:02:35.236Z"),
          updated_by: 1
        }
      })

Argument `budget`: Invalid value provided. Expected Float, NullableFloatFieldUpdateOperationsInput, Null, Float, NullableFloatFieldUpdateOperationsInput or Null, provided Enum.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.sub_category.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\subCategory.dao.ts:279:63

  276 
  277 const transaction = connectionObj ? connectionObj : prisma;
  278 const currentDate = new Date();
â†’ 279 const subCategoryDetails = await transaction.sub_category.update({
        where: {
          sub_category_id: 72
        },
        data: {
          budget: NaN,
                  ~~~
          updated_date: new Date("2023-09-06T14:04:24.246Z"),
          updated_by: 1
        }
      })

Argument `budget`: Invalid value provided. Expected Float, NullableFloatFieldUpdateOperationsInput, Null, Float, NullableFloatFieldUpdateOperationsInput or Null, provided Enum.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.sub_category.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\subCategory.dao.ts:279:63

  276 
  277 const transaction = connectionObj ? connectionObj : prisma;
  278 const currentDate = new Date();
â†’ 279 const subCategoryDetails = await transaction.sub_category.update({
        where: {
          sub_category_id: 72
        },
        data: {
          budget: NaN,
                  ~~~
          updated_date: new Date("2023-09-06T14:05:15.630Z"),
          updated_by: 1
        }
      })

Argument `budget`: Invalid value provided. Expected Float, NullableFloatFieldUpdateOperationsInput, Null, Float, NullableFloatFieldUpdateOperationsInput or Null, provided Enum.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.sub_category.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\subCategory.dao.ts:279:63

  276 
  277 const transaction = connectionObj ? connectionObj : prisma;
  278 const currentDate = new Date();
â†’ 279 const subCategoryDetails = await transaction.sub_category.update({
        where: {
          sub_category_id: 72
        },
        data: {
          budget: NaN,
                  ~~~
          updated_date: new Date("2023-09-06T14:12:06.509Z"),
          updated_by: 1
        }
      })

Argument `budget`: Invalid value provided. Expected Float, NullableFloatFieldUpdateOperationsInput, Null, Float, NullableFloatFieldUpdateOperationsInput or Null, provided Enum.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.sub_category.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\subCategory.dao.ts:279:63

  276 
  277 const transaction = connectionObj ? connectionObj : prisma;
  278 const currentDate = new Date();
â†’ 279 const subCategoryDetails = await transaction.sub_category.update({
        where: {
          sub_category_id: 72
        },
        data: {
          budget: NaN,
                  ~~~
          updated_date: new Date("2023-09-06T14:12:59.466Z"),
          updated_by: 1
        }
      })

Argument `budget`: Invalid value provided. Expected Float, NullableFloatFieldUpdateOperationsInput, Null, Float, NullableFloatFieldUpdateOperationsInput or Null, provided Enum.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.sub_category.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\subCategory.dao.ts:279:63

  276 
  277 const transaction = connectionObj ? connectionObj : prisma;
  278 const currentDate = new Date();
â†’ 279 const subCategoryDetails = await transaction.sub_category.update({
        where: {
          sub_category_id: 72
        },
        data: {
          budget: NaN,
                  ~~~
          updated_date: new Date("2023-09-06T14:13:30.763Z"),
          updated_by: 1
        }
      })

Argument `budget`: Invalid value provided. Expected Float, NullableFloatFieldUpdateOperationsInput, Null, Float, NullableFloatFieldUpdateOperationsInput or Null, provided Enum.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getBomTotalBySubCategoryId << ERRSTRING >>Error: 
Invalid `transaction.bom.aggregate()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\bom.dao.ts:490:42

  487 ) => {
  488   try {
  489     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 490     const result = await transaction.bom.aggregate({
            _sum: {
              total: true
            },
            where: {
              sub_category_id: 72
            },
            _sumRawmt: {
            ~~~~~~~~~
              total: {
                _eq: 'RAWMT'
              }
            },
            _sumLabor: {
            ~~~~~~~~~
              total: {
                _eq: 'LABOR'
              }
            },
            _sumMcnry: {
            ~~~~~~~~~
              total: {
                _eq: 'MCNRY'
              }
            }
          })

Unknown arg `_sumRawmt` in _sumRawmt for type AggregateBom. Did you mean `select`? Available args:
type aggregatebom {
  where?: bomWhereInput
  orderBy?: List<bomOrderByWithRelationInput> | bomOrderByWithRelationInput
  cursor?: bomWhereUniqueInput
  take?: Int
  skip?: Int
}
Unknown arg `_sumLabor` in _sumLabor for type AggregateBom. Did you mean `cursor`? Available args:
type aggregatebom {
  where?: bomWhereInput
  orderBy?: List<bomOrderByWithRelationInput> | bomOrderByWithRelationInput
  cursor?: bomWhereUniqueInput
  take?: Int
  skip?: Int
}
Unknown arg `_sumMcnry` in _sumMcnry for type AggregateBom. Did you mean `cursor`? Available args:
type aggregatebom {
  where?: bomWhereInput
  orderBy?: List<bomOrderByWithRelationInput> | bomOrderByWithRelationInput
  cursor?: bomWhereUniqueInput
  take?: Int
  skip?: Int
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getBomTotalBySubCategoryId << ERRSTRING >>TypeError: Cannot read properties of undefined (reading '$queryRaw')
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getBomTotalBySubCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42883`. Message: `db error: ERROR: operator does not exist: integer = text
HINT: No operator matches the given name and argument types. You might need to add explicit type casts.`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getBomTotalBySubCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42883`. Message: `db error: ERROR: operator does not exist: integer = text
HINT: No operator matches the given name and argument types. You might need to add explicit type casts.`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getBomTotalBySubCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42883`. Message: `db error: ERROR: operator does not exist: integer = text
HINT: No operator matches the given name and argument types. You might need to add explicit type casts.`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getBomTotalBySubCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `22P02`. Message: `db error: ERROR: invalid input syntax for type integer: "$1"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getBomTotalBySubCategoryId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42883`. Message: `db error: ERROR: operator does not exist: integer = text
HINT: No operator matches the given name and argument types. You might need to add explicit type casts.`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/updateProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project_site.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\project.dao.ts:199:62

  196     where: { project_site_id: project_site_id },
  197   });
  198 } else {
â†’ 199   const projectSite = await transaction.project_site.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.bom_detail.aggregate()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\bomDetail.dao.ts:563:46

  560 ) => {
  561   try {
  562     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 563     const bom = await transaction.bom_detail.aggregate({
            sum: {
              total: true
            },
            where: {
              bom_configuration_id: 1
            },
          ? _count?: true,
          ? _avg?: true,
          ? _sum?: true,
          ? _min?: true,
          ? _max?: true
          })


The `select` statement for type AggregateBom_detail must not be empty. Available options are listed in green.

[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>Error: 
Invalid `transaction.bom_detail.aggregate()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\bomDetail.dao.ts:563:46

  560 ) => {
  561   try {
  562     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 563     const bom = await transaction.bom_detail.aggregate({
            total: true,
            ~~~~~
            sum: {
            ~~~
              total: true
            },
            where: {
              bom_configuration_id: 1
            },
          ? _count?: true,
          ? _avg?: true,
          ? _sum?: true,
          ? _min?: true,
          ? _max?: true
          })

Unknown arg `sum` in sum for type AggregateBom_detail. Did you mean `skip`? Available args:
type aggregatebom_detail {
  where?: bom_detailWhereInput
  orderBy?: List<bom_detailOrderByWithRelationInput> | bom_detailOrderByWithRelationInput
  cursor?: bom_detailWhereUniqueInput
  take?: Int
  skip?: Int
}
Unknown field `total` for select statement on model AggregateBom_detail. Available options are listed in green. Did you mean `_max`?

[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>TypeError: Cannot read properties of undefined (reading 'total')
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getBomTotalBySubCategoryId << ERRSTRING >>TypeError: Cannot read properties of undefined (reading 'groupBy')
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getBomTotalBySubCategoryId << ERRSTRING >>TypeError: transaction.bom_detail.groupBy(...).select is not a function
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createCategory << ERRSTRING >>Error: 
Invalid `transaction.category.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\category.dao.ts:20:49

  17 const is_delete = false;
  18 const formatted_start_date = start_date ? new Date(start_date) : null;
  19 const formatted_end_date = end_date ? new Date(end_date) : null;
â†’ 20 const category = await transaction.category.create({
       data: {
         name: 'Civil',
         project_id: 86,
         budget: 24111999,
         created_by: 1,
         created_date: new Date('2023-09-07T10:15:52.181Z'),
         updated_date: new Date('2023-09-07T10:15:52.181Z'),
         is_delete: false,
         description: 'Description for Civil Category',
         start_date: new Date('1999-11-24T00:00:00.000Z'),
         end_date: new Date('1999-11-25T00:00:00.000Z'),
         bom_configuration_id: 1
         ~~~~~~~~~~~~~~~~~~~~
       }
     })

Unknown arg `bom_configuration_id` in data.bom_configuration_id for type categoryUncheckedCreateInput. Available args:

type categoryUncheckedCreateInput {
  category_id?: Int
  name: String
  project_id?: Int | Null
  budget?: Float | Null
  created_date: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  is_delete?: Boolean
  description?: String | Null
  start_date?: DateTime | Null
  end_date?: DateTime | Null
  sub_category?: sub_categoryUncheckedCreateNestedManyWithoutCategoryInput
  bom_detail?: bom_detailUncheckedCreateNestedManyWithoutCategory_dataInput
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/checkDuplicateLabourType << ERRSTRING >>Error: 
Invalid `transaction.labour.findFirst()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\labour.dao.ts:166:45

  163 ) => {
  164   try {
  165     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 166     const labour = await transaction.labour.findFirst({
            where: {
              labour_type: {
                ilike: 'plumber'
                ~~~~~
              }
            }
          })

Unknown arg `ilike` in where.labour_type.ilike for type StringFilter. Did you mean `lte`? Available args:
type StringFilter {
  equals?: String
  in?: List<String> | String
  notIn?: List<String> | String
  lt?: String
  lte?: String
  gt?: String
  gte?: String
  contains?: String
  startsWith?: String
  endsWith?: String
  mode?: QueryMode
  not?: String | NestedStringFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/checkDuplicateLabourType << ERRSTRING >>Error: 
Invalid `transaction.labour.findFirst()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\labour.dao.ts:166:45

  163 ) => {
  164   try {
  165     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 166     const labour = await transaction.labour.findFirst({
            where: {
              labour_type: {
                ilike: 'Plumber'
                ~~~~~
              }
            }
          })

Unknown arg `ilike` in where.labour_type.ilike for type StringFilter. Did you mean `lte`? Available args:
type StringFilter {
  equals?: String
  in?: List<String> | String
  notIn?: List<String> | String
  lt?: String
  lte?: String
  gt?: String
  gte?: String
  contains?: String
  startsWith?: String
  endsWith?: String
  mode?: QueryMode
  not?: String | NestedStringFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectMemberAssociationId << ERRSTRING >>Error: 
Invalid `transaction.project_member_association.findFirst()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:91:52

  88 try {
  89   const transaction = connectionObj !== null ? connectionObj : prisma;
  90   const projectMemberAssociation =
â†’ 91     await transaction.project_member_association.findFirst({
           where: {
             project_member_association_id: 1,
             is_delete: false
           },
           include: {
             project_data: true,
             user_data: {
               select: {
                 first_name: true,
                 last_name: true
               },
               user_profiles: {
               ~~~~~~~~~~~~~
                 select: {
                   profile_image_url: true
                 }
               }
             },
             project_role_data: {
               select: {
                 master_data_name: true
               }
             }
           }
         })

Unknown arg `user_profiles` in include.user_data.user_profiles for type users. Did you mean `select`? Available args:
type user_data {

}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndRoleType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:328:52

  325 try {
  326   const transaction = connectionObj !== null ? connectionObj : prisma;
  327   const projectMemberAssociation =
â†’ 328     await transaction.project_member_association.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndRoleType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:328:52

  325 try {
  326   const transaction = connectionObj !== null ? connectionObj : prisma;
  327   const projectMemberAssociation =
â†’ 328     await transaction.project_member_association.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndRoleType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:328:52

  325 try {
  326   const transaction = connectionObj !== null ? connectionObj : prisma;
  327   const projectMemberAssociation =
â†’ 328     await transaction.project_member_association.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndRoleType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:328:52

  325 try {
  326   const transaction = connectionObj !== null ? connectionObj : prisma;
  327   const projectMemberAssociation =
â†’ 328     await transaction.project_member_association.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndRoleType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:328:52

  325 try {
  326   const transaction = connectionObj !== null ? connectionObj : prisma;
  327   const projectMemberAssociation =
â†’ 328     await transaction.project_member_association.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/search << ERRSTRING >>Error: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:275:52

  272 const transaction = connectionObj !== null ? connectionObj : prisma;
  273 const filter = filters.filterProjectMemberAssociation;
  274 const projectMemberAssociation =
â†’ 275   await transaction.project_member_association.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                project_id: 132
              }
            ],
            OR: [
              {
                project_data: {
                  project_name: {
                    contains: 'VijAy',
                    mode: 'insensitive'
                  }
                }
              },
              {
                user_data: {
                  first_name: {
                    contains: 'VijAy',
                    mode: 'insensitive'
                  }
                }
              },
              {
                user_data: {
                  last_name: {
                    contains: 'VijAy',
                    mode: 'insensitive'
                  }
                }
              },
              {
                project_role_data: {
                  master_data_name: {
                  ~~~~~~~~~~~~~~~~
                    contains: 'VijAy',
                    mode: 'insensitive'
                  }
                }
              }
            ]
          },
          include: {
            project_data: true,
            user_data: {
              select: {
                first_name: true,
                last_name: true,
                user_profiles: {
                  select: {
                    profile_image_url: true
                  }
                }
              }
            },
            project_role_data: {
              select: {
                role_name: true
              }
            }
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `master_data_name` in where.OR.3.project_role_data.master_data_name for type RoleRelationFilter. Available args:

type RoleRelationFilter {
  is?: roleWhereInput | Null
  isNot?: roleWhereInput | Null
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.project_site.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectSite.dao.ts:73:56

  70 const getByProjectId = async (project_id: number, connectionObj = null) => {
  71   try {
  72     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 73     const projectSite = await transaction.project_site.findMany({
           where: {
             project_id: '86'
                         ~~~~
           }
         })

Argument project_id: Got invalid value '86' on prisma.findManyproject_site. Provided String, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$9"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$9"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$3"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$2"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$9"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>TypeError: Do not know how to serialize a BigInt
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>TypeError: Do not know how to serialize a BigInt
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `0A000`. Message: `db error: ERROR: cached plan must not change result type`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$9"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$9"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$9"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$9"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$9"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "'$9'"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "'$9'"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>error: syntax error at or near "'desc'"
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStore << ERRSTRING >>error: syntax error at or near "'desc'"
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createIndentRequest << ERRSTRING >>Error: 
Invalid `transaction.indent_request.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\indentRequest.dao.ts:35:60

  32   ? new Date(rejected_date)
  33   : null;
  34 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 35 const indentRequest = await transaction.indent_request.create({
       requester_user_id: 62,
       ~~~~~~~~~~~~~~~~~
       requested_date: new Date('2023-09-12T00:00:00.000Z'),
       ~~~~~~~~~~~~~~
       request_status: 'Pending',
       ~~~~~~~~~~~~~~
       priority: 'High',
       ~~~~~~~~
       description: 'Sample Request 1',
       ~~~~~~~~~~~
       expected_delivery_date: new Date('2023-09-20T00:00:00.000Z'),
       ~~~~~~~~~~~~~~~~~~~~~~
       total_cost: 500.5,
       ~~~~~~~~~~
       approvar_user_id: 1,
       ~~~~~~~~~~~~~~~~
       approvar_status: 'Pending',
       ~~~~~~~~~~~~~~~
       approved_date: null,
       ~~~~~~~~~~~~~
       rejected_date: null,
       ~~~~~~~~~~~~~
       approvar_comments: null,
       ~~~~~~~~~~~~~~~~~
       created_by: 1,
       ~~~~~~~~~~
       created_date: new Date('2023-09-12T12:13:36.088Z'),
       ~~~~~~~~~~~~
       updated_date: new Date('2023-09-12T12:13:36.088Z'),
       ~~~~~~~~~~~~
       is_delete: false,
       ~~~~~~~~~
     + data: indent_requestCreateInput | indent_requestUncheckedCreateInput
     })

Unknown arg `requester_user_id` in requester_user_id for type indent_request.
Unknown arg `requested_date` in requested_date for type indent_request. Did you mean `data`?
Unknown arg `request_status` in request_status for type indent_request. Did you mean `select`?
Unknown arg `priority` in priority for type indent_request. Did you mean `data`?
Unknown arg `description` in description for type indent_request. Did you mean `data`?
Unknown arg `expected_delivery_date` in expected_delivery_date for type indent_request.
Unknown arg `total_cost` in total_cost for type indent_request. Did you mean `select`?
Unknown arg `approvar_user_id` in approvar_user_id for type indent_request.
Unknown arg `approvar_status` in approvar_status for type indent_request.
Unknown arg `approved_date` in approved_date for type indent_request. Did you mean `data`?
Unknown arg `rejected_date` in rejected_date for type indent_request. Did you mean `select`?
Unknown arg `approvar_comments` in approvar_comments for type indent_request.
Unknown arg `created_by` in created_by for type indent_request. Did you mean `data`?
Unknown arg `created_date` in created_date for type indent_request. Did you mean `data`?
Unknown arg `updated_date` in updated_date for type indent_request. Did you mean `data`?
Unknown arg `is_delete` in is_delete for type indent_request.
â†’ Did you forget to wrap it with `select`? e.g. { select: { is_delete: false } }
Argument data is missing.

Note: Lines with + are required

[31merror[39m: ERRORS: status code: Error << DETAILS >>/createIndentRequest << ERRSTRING >>Error: 
Invalid `transaction.indent_request.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\indentRequest.dao.ts:35:60

  32   ? new Date(rejected_date)
  33   : null;
  34 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 35 const indentRequest = await transaction.indent_request.create({
       requester_user_id: 62,
       ~~~~~~~~~~~~~~~~~
       requested_date: new Date('2023-09-12T00:00:00.000Z'),
       ~~~~~~~~~~~~~~
       request_status: 'Pending',
       ~~~~~~~~~~~~~~
       priority: 'High',
       ~~~~~~~~
       description: 'Sample Request 1',
       ~~~~~~~~~~~
       expected_delivery_date: new Date('2023-09-20T00:00:00.000Z'),
       ~~~~~~~~~~~~~~~~~~~~~~
       total_cost: 500.5,
       ~~~~~~~~~~
       approvar_user_id: 1,
       ~~~~~~~~~~~~~~~~
       approvar_status: 'Pending',
       ~~~~~~~~~~~~~~~
       approved_date: null,
       ~~~~~~~~~~~~~
       rejected_date: null,
       ~~~~~~~~~~~~~
       approvar_comments: null,
       ~~~~~~~~~~~~~~~~~
       created_by: 1,
       ~~~~~~~~~~
       created_date: new Date('2023-09-12T12:15:22.011Z'),
       ~~~~~~~~~~~~
       updated_date: new Date('2023-09-12T12:15:22.011Z'),
       ~~~~~~~~~~~~
       is_delete: false,
       ~~~~~~~~~
     + data: indent_requestCreateInput | indent_requestUncheckedCreateInput
     })

Unknown arg `requester_user_id` in requester_user_id for type indent_request.
Unknown arg `requested_date` in requested_date for type indent_request. Did you mean `data`?
Unknown arg `request_status` in request_status for type indent_request. Did you mean `select`?
Unknown arg `priority` in priority for type indent_request. Did you mean `data`?
Unknown arg `description` in description for type indent_request. Did you mean `data`?
Unknown arg `expected_delivery_date` in expected_delivery_date for type indent_request.
Unknown arg `total_cost` in total_cost for type indent_request. Did you mean `select`?
Unknown arg `approvar_user_id` in approvar_user_id for type indent_request.
Unknown arg `approvar_status` in approvar_status for type indent_request.
Unknown arg `approved_date` in approved_date for type indent_request. Did you mean `data`?
Unknown arg `rejected_date` in rejected_date for type indent_request. Did you mean `select`?
Unknown arg `approvar_comments` in approvar_comments for type indent_request.
Unknown arg `created_by` in created_by for type indent_request. Did you mean `data`?
Unknown arg `created_date` in created_date for type indent_request. Did you mean `data`?
Unknown arg `updated_date` in updated_date for type indent_request. Did you mean `data`?
Unknown arg `is_delete` in is_delete for type indent_request.
â†’ Did you forget to wrap it with `select`? e.g. { select: { is_delete: false } }
Argument data is missing.

Note: Lines with + are required

[31merror[39m: ERRORS: status code: Error << DETAILS >>/createIndentRequest << ERRSTRING >>Error: 
Invalid `transaction.indent_request.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\indentRequest.dao.ts:35:60

  32   ? new Date(rejected_date)
  33   : null;
  34 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 35 const indentRequest = await transaction.indent_request.create({
       requester_user_id: 62,
       ~~~~~~~~~~~~~~~~~
       requested_date: new Date('2023-09-12T00:00:00.000Z'),
       ~~~~~~~~~~~~~~
       request_status: 'Pending',
       ~~~~~~~~~~~~~~
       priority: 'High',
       ~~~~~~~~
       description: 'Sample Request 1',
       ~~~~~~~~~~~
       expected_delivery_date: new Date('2023-09-20T00:00:00.000Z'),
       ~~~~~~~~~~~~~~~~~~~~~~
       total_cost: 500.5,
       ~~~~~~~~~~
       approvar_user_id: 1,
       ~~~~~~~~~~~~~~~~
       approvar_status: 'Pending',
       ~~~~~~~~~~~~~~~
       approved_date: null,
       ~~~~~~~~~~~~~
       rejected_date: null,
       ~~~~~~~~~~~~~
       approvar_comments: null,
       ~~~~~~~~~~~~~~~~~
       created_by: 1,
       ~~~~~~~~~~
       created_date: new Date('2023-09-12T12:16:49.007Z'),
       ~~~~~~~~~~~~
       updated_date: new Date('2023-09-12T12:16:49.007Z'),
       ~~~~~~~~~~~~
       is_delete: false,
       ~~~~~~~~~
     + data: indent_requestCreateInput | indent_requestUncheckedCreateInput
     })

Unknown arg `requester_user_id` in requester_user_id for type indent_request.
Unknown arg `requested_date` in requested_date for type indent_request. Did you mean `data`?
Unknown arg `request_status` in request_status for type indent_request. Did you mean `select`?
Unknown arg `priority` in priority for type indent_request. Did you mean `data`?
Unknown arg `description` in description for type indent_request. Did you mean `data`?
Unknown arg `expected_delivery_date` in expected_delivery_date for type indent_request.
Unknown arg `total_cost` in total_cost for type indent_request. Did you mean `select`?
Unknown arg `approvar_user_id` in approvar_user_id for type indent_request.
Unknown arg `approvar_status` in approvar_status for type indent_request.
Unknown arg `approved_date` in approved_date for type indent_request. Did you mean `data`?
Unknown arg `rejected_date` in rejected_date for type indent_request. Did you mean `select`?
Unknown arg `approvar_comments` in approvar_comments for type indent_request.
Unknown arg `created_by` in created_by for type indent_request. Did you mean `data`?
Unknown arg `created_date` in created_date for type indent_request. Did you mean `data`?
Unknown arg `updated_date` in updated_date for type indent_request. Did you mean `data`?
Unknown arg `is_delete` in is_delete for type indent_request.
â†’ Did you forget to wrap it with `select`? e.g. { select: { is_delete: false } }
Argument data is missing.

Note: Lines with + are required

[31merror[39m: ERRORS: status code: Error << DETAILS >>/createIndentRequest << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.intent_request_details.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\indentRequest.dao.ts:67:52

  64 const is_delete = indent_request_detail.is_delete;
  65 if (is_delete === 'N') {
  66   const indentRequestDetails =
â†’ 67     await transaction.intent_request_details.create(
The table `public.intent_request_details` does not exist in the current database.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createIndentRequest << ERRSTRING >>TypeError: Cannot read properties of undefined (reading 'create')
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getBySubCategoryId << ERRSTRING >>Error: 
Invalid `transaction.sub_category.findFirst()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\subCategory.dao.ts:89:56

  86 const getById = async (subCategoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const subCategory = await transaction.sub_category.findFirst({
           where: {
             sub_category_id: NaN,
                              ~~~
             is_delete: false
           },
           include: {
             category: true,
             project_data: {
               select: {
                 project_name: true,
                 description: true
               }
             },
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument sub_category_id: Got invalid value NaN on prisma.findFirstsub_category. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndBomType << ERRSTRING >>Error: 
Invalid `transaction.bom_detail.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\bomDetail.dao.ts:646:46

  643 ) => {
  644   try {
  645     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 646     const bom = await transaction.bom_detail.findMany({
            where: {
              bom_type: 'RAWMT',
              is_delete: false,
              bom_configuration_data: {
                project_id: '137'
                ~~~~~~~~~~
              }
            },
            include: {
              bom_configuration_data: {
                include: {
                  bom_type_data: {
                    select: {
                      master_data_name: true
                    }
                  }
                }
              },
              uom_data: true,
              category_data: true,
              sub_category_data: true,
              sub_sub_category_data: true,
              item_data: true,
              labour_data: true,
              machinery_data: true
            },
            orderBy: [
              {
                updated_date: 'desc'
              }
            ]
          })

Unknown arg `project_id` in where.bom_configuration_data.project_id for type Bom_configurationRelationFilter. Available args:

type Bom_configurationRelationFilter {
  is?: bom_configurationWhereInput | Null
  isNot?: bom_configurationWhereInput | Null
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchIndentRequest << ERRSTRING >>Error: 
Invalid `transaction.indent_request.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\indentRequest.dao.ts:325:60

  322 try {
  323   const transaction = connectionObj !== null ? connectionObj : prisma;
  324   const filter = filters.filterIndentRequest;
â†’ 325   const indentRequest = await transaction.indent_request.findMany({
          where: {
            is_delete: false,
            OR: [
              {
                request_status: {
                  contains: 'High',
                  mode: 'insensitive'
                }
              },
              {
                approvar_status: {
                  contains: 'High',
                  mode: 'insensitive'
                }
              },
              {
                description: {
                  contains: 'High',
                  mode: 'insensitive'
                }
              },
              {
                priority: {
                  contains: 'High',
                  mode: 'insensitive'
                }
              },
              {
                approvar_comments: {
                  contains: 'High',
                  mode: 'insensitive'
                }
              },
              {
                requester_user_data: {
                  first_name: {
                    contains: 'High',
                    mode: 'insensitive'
                  }
                }
              },
              {
                approvar_user_data: {
                  last_name: {
                    contains: 'High',
                    mode: 'insensitive'
                  }
                }
              },
              {
                requester_user_data: {
                  first_name: {
                    contains: 'High',
                    mode: 'insensitive'
                  }
                }
              },
              {
                approvar_user_data: {
                  last_name: {
                    contains: 'High',
                    mode: 'insensitive'
                  }
                }
              },
              {
                bom_detail_data: {
                ~~~~~~~~~~~~~~~
                  bom_name: {
                    contains: 'High',
                    mode: 'insensitive'
                  }
                }
              },
              {
                bom_detail_data: {
                ~~~~~~~~~~~~~~~
                  some: {
                    item_data: {
                      item_name: {
                        contains: 'High',
                        mode: 'insensitive'
                      }
                    }
                  }
                }
              },
              {
                bom_detail_data: {
                ~~~~~~~~~~~~~~~
                  some: {
                    machinery_data: {
                      machinery_name: {
                        contains: 'High',
                        mode: 'insensitive'
                      }
                    }
                  }
                }
              },
              {
                bom_detail_data: {
                ~~~~~~~~~~~~~~~
                  some: {
                    labour_data: {
                      labour_type: {
                        contains: 'High',
                        mode: 'insensitive'
                      }
                    }
                  }
                }
              }
            ]
          },
          include: {
            requester_user_data: {
              select: {
                first_name: true,
                last_name: true
              }
            },
            approvar_user_data: {
              select: {
                first_name: true,
                last_name: true
              }
            },
            indent_request_details: {
              where: {
                is_delete: false
              },
              include: {
                bom_detail_data: {
                  include: {
                    uom_data: {
                      select: {
                        name: true
                      }
                    },
                    sub_category_data: {
                      select: {
                        name: true
                      }
                    },
                    item_data: true,
                    labour_data: true,
                    machinery_data: true
                  }
                }
              },
              orderBy: [
                {
                  updated_date: 'desc'
                }
              ]
            }
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `bom_detail_data` in where.OR.9.bom_detail_data for type indent_requestWhereInput. Available args:

type indent_requestWhereInput {
  AND?: indent_requestWhereInput | List<indent_requestWhereInput>
  OR?: List<indent_requestWhereInput>
  NOT?: indent_requestWhereInput | List<indent_requestWhereInput>
  indent_request_id?: IntFilter | Int
  requester_user_id?: IntFilter | Int
  requested_date?: DateTimeFilter | DateTime
  request_status?: StringNullableFilter | String | Null
  priority?: StringNullableFilter | String | Null
  description?: StringNullableFilter | String | Null
  expected_delivery_date?: DateTimeNullableFilter | DateTime | Null
  total_cost?: FloatNullableFilter | Float | Null
  approvar_user_id?: IntNullableFilter | Int | Null
  approvar_status?: StringNullableFilter | String | Null
  approved_date?: DateTimeNullableFilter | DateTime | Null
  rejected_date?: DateTimeNullableFilter | DateTime | Null
  approvar_comments?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  requester_user_data?: UsersRelationFilter | usersWhereInput
  approvar_user_data?: UsersRelationFilter | usersWhereInput | Null
  indent_request_details?: Indent_request_detailsListRelationFilter
}
Unknown arg `bom_detail_data` in where.OR.10.bom_detail_data for type indent_requestWhereInput. Available args:

type indent_requestWhereInput {
  AND?: indent_requestWhereInput | List<indent_requestWhereInput>
  OR?: List<indent_requestWhereInput>
  NOT?: indent_requestWhereInput | List<indent_requestWhereInput>
  indent_request_id?: IntFilter | Int
  requester_user_id?: IntFilter | Int
  requested_date?: DateTimeFilter | DateTime
  request_status?: StringNullableFilter | String | Null
  priority?: StringNullableFilter | String | Null
  description?: StringNullableFilter | String | Null
  expected_delivery_date?: DateTimeNullableFilter | DateTime | Null
  total_cost?: FloatNullableFilter | Float | Null
  approvar_user_id?: IntNullableFilter | Int | Null
  approvar_status?: StringNullableFilter | String | Null
  approved_date?: DateTimeNullableFilter | DateTime | Null
  rejected_date?: DateTimeNullableFilter | DateTime | Null
  approvar_comments?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  requester_user_data?: UsersRelationFilter | usersWhereInput
  approvar_user_data?: UsersRelationFilter | usersWhereInput | Null
  indent_request_details?: Indent_request_detailsListRelationFilter
}
Unknown arg `bom_detail_data` in where.OR.11.bom_detail_data for type indent_requestWhereInput. Available args:

type indent_requestWhereInput {
  AND?: indent_requestWhereInput | List<indent_requestWhereInput>
  OR?: List<indent_requestWhereInput>
  NOT?: indent_requestWhereInput | List<indent_requestWhereInput>
  indent_request_id?: IntFilter | Int
  requester_user_id?: IntFilter | Int
  requested_date?: DateTimeFilter | DateTime
  request_status?: StringNullableFilter | String | Null
  priority?: StringNullableFilter | String | Null
  description?: StringNullableFilter | String | Null
  expected_delivery_date?: DateTimeNullableFilter | DateTime | Null
  total_cost?: FloatNullableFilter | Float | Null
  approvar_user_id?: IntNullableFilter | Int | Null
  approvar_status?: StringNullableFilter | String | Null
  approved_date?: DateTimeNullableFilter | DateTime | Null
  rejected_date?: DateTimeNullableFilter | DateTime | Null
  approvar_comments?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  requester_user_data?: UsersRelationFilter | usersWhereInput
  approvar_user_data?: UsersRelationFilter | usersWhereInput | Null
  indent_request_details?: Indent_request_detailsListRelationFilter
}
Unknown arg `bom_detail_data` in where.OR.12.bom_detail_data for type indent_requestWhereInput. Available args:

type indent_requestWhereInput {
  AND?: indent_requestWhereInput | List<indent_requestWhereInput>
  OR?: List<indent_requestWhereInput>
  NOT?: indent_requestWhereInput | List<indent_requestWhereInput>
  indent_request_id?: IntFilter | Int
  requester_user_id?: IntFilter | Int
  requested_date?: DateTimeFilter | DateTime
  request_status?: StringNullableFilter | String | Null
  priority?: StringNullableFilter | String | Null
  description?: StringNullableFilter | String | Null
  expected_delivery_date?: DateTimeNullableFilter | DateTime | Null
  total_cost?: FloatNullableFilter | Float | Null
  approvar_user_id?: IntNullableFilter | Int | Null
  approvar_status?: StringNullableFilter | String | Null
  approved_date?: DateTimeNullableFilter | DateTime | Null
  rejected_date?: DateTimeNullableFilter | DateTime | Null
  approvar_comments?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  requester_user_data?: UsersRelationFilter | usersWhereInput
  approvar_user_data?: UsersRelationFilter | usersWhereInput | Null
  indent_request_details?: Indent_request_detailsListRelationFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/updateIndentRequest << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.indent_request_details.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\indentRequest.dao.ts:166:54

  163 if (indent_request_details_id) {
  164   if (is_delete === 'N') {
  165     const indentRequestDetails =
â†’ 166       await transaction.indent_request_details.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchInventory << ERRSTRING >>Error: 
Invalid `transaction.inventory.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\inventory.dao.ts:165:51

  162 try {
  163   const transaction = connectionObj !== null ? connectionObj : prisma;
  164   const filter = filters.filterInventory;
â†’ 165   const inventory = await transaction.inventory.findMany({
          where: {
            is_delete: false,
            OR: [
              {
                item_name: {
                  contains: 'ceme',
                  mode: 'insensitive'
                }
              },
              {
                item_category: {
                  contains: 'ceme',
                  mode: 'insensitive'
                }
              },
              {
                project_data: {
                  project_name: {
                    contains: 'ceme',
                    mode: 'insensitive'
                  }
                }
              },
              {
                item_data: {
                  item_name: {
                    contains: 'ceme',
                    mode: 'insensitive'
                  }
                }
              },
              {
                store_data: {
                  store_name: {
                    contains: 'ceme',
                    mode: 'insensitive'
                  }
                }
              },
              {
                store_data: {
                  store_name: {
                    contains: 'ceme',
                    mode: 'insensitive'
                  }
                }
              },
              {
                store_data: {
                  some: {
                  ~~~~
                    store_manager_data: {
                      first_name: {
                        contains: 'ceme',
                        mode: 'insensitive'
                      },
                      last_name: {
                        contains: 'ceme',
                        mode: 'insensitive'
                      }
                    }
                  }
                }
              }
            ]
          },
          include: {
            item_data: true,
            store_data: {
              include: {
                store_manager_data: {
                  select: {
                    first_name: true,
                    last_name: true
                  }
                }
              }
            },
            project_data: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `some` in where.OR.6.store_data.some for type StoreRelationFilter. Did you mean `is`? Available args:
type StoreRelationFilter {
  is?: storeWhereInput | Null
  isNot?: storeWhereInput | Null
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/createPurchaseRequest << ERRSTRING >>Error: 
Invalid `transaction.purchase_request.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseRequest.dao.ts:19:64

  16 const currentDate = new Date();
  17 const is_delete = false;
  18 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 19 const purchaseRequest = await transaction.purchase_request.create({
       data: {
         indent_request_id: 10,
         requester_user_id: 1,
         request_date: '2023-09-13',
                       ~~~~~~~~~~~~
         status: 'Requested',
         vendor_selection_method: 'Manual Selection',
         project_id: 137,
         selected_vendor_id: 1,
         total_cost: 241999.11,
         created_by: 1,
         created_date: new Date('2023-09-13T13:13:25.067Z'),
         updated_date: new Date('2023-09-13T13:13:25.067Z'),
         is_delete: false
       }
     })

Argument request_date: Got invalid value '2023-09-13' on prisma.createOnepurchase_request. Provided String, expected DateTime or Null.


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchPurchaseRequest << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.purchase_request.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseRequest.dao.ts:167:64

  164 try {
  165   const transaction = connectionObj !== null ? connectionObj : prisma;
  166   const filter = filters.filterPurchaseRequest;
â†’ 167   const purchaseRequest = await transaction.purchase_request.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/updateIndentRequest << ERRSTRING >>TypeError: indent_request_details is not iterable
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByIndentRequestId << ERRSTRING >>Error: 
Invalid `transaction.indent_request.findFirst()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\indentRequest.dao.ts:219:60

  216 const getById = async (indentRequestId: number, connectionObj = null) => {
  217   try {
  218     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 219     const indentRequest = await transaction.indent_request.findFirst({
            where: {
              indent_request_id: 9,
              is_delete: false
            },
            include: {
          ?   requester_user_data?: true,
              approver_user_data: {
              ~~~~~~~~~~~~~~~~~~
                select: {
                  first_name: true,
                  last_name: true
                }
              },
          ?   project_data?: true,
          ?   indent_request_details?: true,
          ?   approvar_user_data?: true,
          ?   purchase_request?: true,
          ?   _count?: true
            }
          })


Unknown field `approver_user_data` for include statement on model indent_request. Available options are listed in green. Did you mean `approvar_user_data`?

[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchPurchaseOrder << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:155:60

  152 try {
  153   const transaction = connectionObj !== null ? connectionObj : prisma;
  154   const filter = filters.filterPurchaseOrder;
â†’ 155   const purchaseOrder = await transaction.purchase_order.findMany({
          where: {
            AND: [],
            OR: [
              {
                name: {
                ~~~~
                  contains: '',
                  mode: 'insensitive'
                }
              },
              {
                contact_details: {
                ~~~~~~~~~~~~~~~
                  contains: '',
                  mode: 'insensitive'
                }
              }
            ],
            is_delete: false
          },
          include: {
            purchase_request_data: {
              include: {
                indent_request_data: true
              }
            },
            vendor_data: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `name` in where.OR.0.name for type purchase_orderWhereInput. Did you mean `AND`? Available args:
type purchase_orderWhereInput {
  AND?: purchase_orderWhereInput | List<purchase_orderWhereInput>
  OR?: List<purchase_orderWhereInput>
  NOT?: purchase_orderWhereInput | List<purchase_orderWhereInput>
  purchase_order_id?: IntFilter | Int
  purchase_request_id?: IntNullableFilter | Int | Null
  vendor_id?: IntNullableFilter | Int | Null
  order_date?: DateTimeNullableFilter | DateTime | Null
  status?: StringNullableFilter | String | Null
  total_cost?: FloatNullableFilter | Float | Null
  order_remark?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  purchase_request_data?: Purchase_requestRelationFilter | purchase_requestWhereInput | Null
  vendor_data?: VendorRelationFilter | vendorWhereInput | Null
}
Unknown arg `contact_details` in where.OR.1.contact_details for type purchase_orderWhereInput. Available args:

type purchase_orderWhereInput {
  AND?: purchase_orderWhereInput | List<purchase_orderWhereInput>
  OR?: List<purchase_orderWhereInput>
  NOT?: purchase_orderWhereInput | List<purchase_orderWhereInput>
  purchase_order_id?: IntFilter | Int
  purchase_request_id?: IntNullableFilter | Int | Null
  vendor_id?: IntNullableFilter | Int | Null
  order_date?: DateTimeNullableFilter | DateTime | Null
  status?: StringNullableFilter | String | Null
  total_cost?: FloatNullableFilter | Float | Null
  order_remark?: StringNullableFilter | String | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  purchase_request_data?: Purchase_requestRelationFilter | purchase_requestWhereInput | Null
  vendor_data?: VendorRelationFilter | vendorWhereInput | Null
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/updateIndentRequest << ERRSTRING >>Error: 
Invalid `transaction.indent_request.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\indentRequest.dao.ts:131:60

  128   ? new Date(rejected_date)
  129   : null;
  130 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 131 const indentRequest = await transaction.indent_request.update({
        where: {
          indent_request_id: 9
        },
        data: {
          requester_user_id: undefined,
          requested_date: null,
                          ~~~~
          request_status: undefined,
          priority: undefined,
          description: undefined,
          expected_delivery_date: null,
          total_cost: undefined,
          approver_user_id: undefined,
          approver_status: 'Approved',
          approved_date: new Date('2023-09-13T18:30:00.000Z'),
          rejected_date: null,
          approver_comments: undefined,
          project_id: undefined,
          updated_by: undefined,
          updated_date: new Date('2023-09-14T11:22:32.752Z')
        }
      })

Argument requested_date for data.requested_date must not be null. Please use undefined instead.


[31merror[39m: ERRORS: status code: Error << DETAILS >>/updateIndentRequest << ERRSTRING >>Error: 
Invalid `transaction.indent_request.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\indentRequest.dao.ts:131:60

  128   ? new Date(rejected_date)
  129   : null;
  130 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 131 const indentRequest = await transaction.indent_request.update({
        where: {
          indent_request_id: 9
        },
        data: {
          requester_user_id: undefined,
          requested_date: null,
                          ~~~~
          request_status: undefined,
          priority: undefined,
          description: undefined,
          expected_delivery_date: null,
          total_cost: undefined,
          approver_user_id: undefined,
          approver_status: 'Approved',
          approved_date: new Date('2023-09-14T00:00:00.000Z'),
          rejected_date: null,
          approver_comments: 'Approved',
          project_id: undefined,
          updated_by: 1,
          updated_date: new Date('2023-09-14T11:35:37.279Z')
        }
      })

Argument requested_date for data.requested_date must not be null. Please use undefined instead.


[31merror[39m: ERRORS: status code: Error << DETAILS >>/search << ERRSTRING >>Error: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:279:52

  276 const transaction = connectionObj !== null ? connectionObj : prisma;
  277 const filter = filters.filterProjectMemberAssociation;
  278 const projectMemberAssociation =
â†’ 279   await transaction.project_member_association.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                user_id: 1
              },
              {
                project_role_id: 1
              },
              {
                project_data: {
                  some: {
                  ~~~~
                    indent_request: {
                      approver_status: 'Pending'
                    }
                  }
                }
              }
            ]
          },
          include: {
            project_data: {
              include: {
                indent_request: {
                  where: {
                    project_id: {
                      not: {
                        equals: null
                      }
                    }
                  }
                }
              }
            },
            user_data: {
              select: {
                first_name: true,
                last_name: true,
                email_id: true,
                user_profiles: {
                  select: {
                    profile_image_url: true
                  }
                }
              }
            },
            project_role_data: {
              select: {
                role_name: true
              }
            }
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `some` in where.AND.2.project_data.some for type ProjectRelationFilter. Did you mean `is`? Available args:
type ProjectRelationFilter {
  is?: projectWhereInput | Null
  isNot?: projectWhereInput | Null
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/search << ERRSTRING >>Error: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:279:52

  276 const transaction = connectionObj !== null ? connectionObj : prisma;
  277 const filter = filters.filterProjectMemberAssociation;
  278 const projectMemberAssociation =
â†’ 279   await transaction.project_member_association.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                user_id: 1
              },
              {
                project_role_id: 1
              },
              {
                project_data: {
                  indent_request: {
                  ~~~~~~~~~~~~~~
                    approver_status: 'Pending'
                  }
                }
              }
            ]
          },
          include: {
            project_data: {
              include: {
                indent_request: {
                  where: {
                    project_id: {
                      not: {
                        equals: null
                      }
                    }
                  }
                }
              }
            },
            user_data: {
              select: {
                first_name: true,
                last_name: true,
                email_id: true,
                user_profiles: {
                  select: {
                    profile_image_url: true
                  }
                }
              }
            },
            project_role_data: {
              select: {
                role_name: true
              }
            }
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `indent_request` in where.AND.2.project_data.indent_request for type ProjectRelationFilter. Available args:

type ProjectRelationFilter {
  is?: projectWhereInput | Null
  isNot?: projectWhereInput | Null
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/search << ERRSTRING >>Error: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:279:52

  276 const transaction = connectionObj !== null ? connectionObj : prisma;
  277 const filter = filters.filterProjectMemberAssociation;
  278 const projectMemberAssociation =
â†’ 279   await transaction.project_member_association.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                user_id: 1
              },
              {
                project_role_id: 1
              },
              {
                project_data: {
                  include: {
                  ~~~~~~~
                    indent_request: {
                      approver_status: 'Approved'
                    }
                  }
                }
              }
            ]
          },
          include: {
            project_data: {
              include: {
                indent_request: {
                  where: {
                    project_id: {
                      not: {
                        equals: null
                      }
                    },
                    approver_status: 'Approved',
                    is_delete: false
                  }
                }
              }
            },
            user_data: {
              select: {
                first_name: true,
                last_name: true,
                email_id: true,
                user_profiles: {
                  select: {
                    profile_image_url: true
                  }
                }
              }
            },
            project_role_data: {
              select: {
                role_name: true
              }
            }
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `include` in where.AND.2.project_data.include for type ProjectRelationFilter. Available args:

type ProjectRelationFilter {
  is?: projectWhereInput | Null
  isNot?: projectWhereInput | Null
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/search << ERRSTRING >>Error: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:279:52

  276 const transaction = connectionObj !== null ? connectionObj : prisma;
  277 const filter = filters.filterProjectMemberAssociation;
  278 const projectMemberAssociation =
â†’ 279   await transaction.project_member_association.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                user_id: 1
              },
              {
                project_role_id: 1
              },
              {
                project_data: {
                  indent_request: {
                    some: {
                      approver_status: {
                        equals: 'Approved'
                      }
                    }
                  }
                }
              }
            ]
          },
          _debug: true,
          ~~~~~~
          include: {
            project_data: {
              include: {
                indent_request: {
                  where: {
                    project_id: {
                      not: {
                        equals: null
                      }
                    },
                    is_delete: false
                  }
                }
              }
            },
            user_data: {
              select: {
                first_name: true,
                last_name: true,
                email_id: true,
                user_profiles: {
                  select: {
                    profile_image_url: true
                  }
                }
              }
            },
            project_role_data: {
              select: {
                role_name: true
              }
            }
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `_debug` in _debug for type project_member_association. Did you mean `where`? Available args:
type findManyproject_member_association {
  where?: project_member_associationWhereInput
  orderBy?: List<project_member_associationOrderByWithRelationInput> | project_member_associationOrderByWithRelationInput
  cursor?: project_member_associationWhereUniqueInput
  take?: Int
  skip?: Int
  distinct?: Project_member_associationScalarFieldEnum | List<Project_member_associationScalarFieldEnum>
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/search << ERRSTRING >>Error: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:279:52

  276 const transaction = connectionObj !== null ? connectionObj : prisma;
  277 const filter = filters.filterProjectMemberAssociation;
  278 const projectMemberAssociation =
â†’ 279   await transaction.project_member_association.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                user_id: 1
              },
              {
                project_role_id: 1
              },
              {
                project_data: {
                  indent_request: {
                  ~~~~~~~~~~~~~~
                    approver_status: {
                      contains: '',
                      mode: 'insensitive'
                    }
                  }
                }
              }
            ]
          },
          include: {
            project_data: {
              include: {
                indent_request: {
                  where: {
                    project_id: {
                      not: {
                        equals: null
                      }
                    },
                    is_delete: false
                  }
                }
              }
            },
            user_data: {
              select: {
                first_name: true,
                last_name: true,
                email_id: true,
                user_profiles: {
                  select: {
                    profile_image_url: true
                  }
                }
              }
            },
            project_role_data: {
              select: {
                role_name: true
              }
            }
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `indent_request` in where.AND.2.project_data.indent_request for type ProjectRelationFilter. Available args:

type ProjectRelationFilter {
  is?: projectWhereInput | Null
  isNot?: projectWhereInput | Null
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/search << ERRSTRING >>Error: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:279:52

  276 const transaction = connectionObj !== null ? connectionObj : prisma;
  277 const filter = filters.filterProjectMemberAssociation;
  278 const projectMemberAssociation =
â†’ 279   await transaction.project_member_association.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                user_id: 1
              },
              {
                project_role_id: 1
              },
              {
                project_data: {
                  some: {
                  ~~~~
                    indent_request: {
                      approver_status: {
                        equals: 'Approved'
                      }
                    }
                  }
                }
              }
            ]
          },
          include: {
            project_data: {
              include: {
                indent_request: {
                  where: {
                    project_id: {
                      not: {
                        equals: null
                      }
                    },
                    is_delete: false
                  }
                }
              }
            },
            user_data: {
              select: {
                first_name: true,
                last_name: true,
                email_id: true,
                user_profiles: {
                  select: {
                    profile_image_url: true
                  }
                }
              }
            },
            project_role_data: {
              select: {
                role_name: true
              }
            }
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `some` in where.AND.2.project_data.some for type ProjectRelationFilter. Did you mean `is`? Available args:
type ProjectRelationFilter {
  is?: projectWhereInput | Null
  isNot?: projectWhereInput | Null
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/search << ERRSTRING >>Error: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:279:52

  276 const transaction = connectionObj !== null ? connectionObj : prisma;
  277 const filter = filters.filterProjectMemberAssociation;
  278 const projectMemberAssociation =
â†’ 279   await transaction.project_member_association.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                user_id: 1
              },
              {
                project_role_id: 1
              },
              {
                project_data: {
                  indent_request: {
                  ~~~~~~~~~~~~~~
                    approver_status: {
                      equals: 'Approved'
                    }
                  }
                }
              }
            ]
          },
          include: {
            project_data: {
              include: {
                indent_request: {
                  where: {
                    project_id: {
                      not: {
                        equals: null
                      }
                    },
                    is_delete: false
                  }
                }
              }
            },
            user_data: {
              select: {
                first_name: true,
                last_name: true,
                email_id: true,
                user_profiles: {
                  select: {
                    profile_image_url: true
                  }
                }
              }
            },
            project_role_data: {
              select: {
                role_name: true
              }
            }
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `indent_request` in where.AND.2.project_data.indent_request for type ProjectRelationFilter. Available args:

type ProjectRelationFilter {
  is?: projectWhereInput | Null
  isNot?: projectWhereInput | Null
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/updatePurchaseRequest << ERRSTRING >>Error: 
Invalid `transaction.purchase_request.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseRequest.dao.ts:66:64

  63 const currentDate = new Date();
  64 const formatted_request_date = request_date ? new Date(request_date) : null;
  65 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 66 const purchaseRequest = await transaction.purchase_request.update({
       where: {
         purchase_request_id: '1'
                              ~~~
       },
       data: {
         indent_request_id: '10',
         ~~~~~~~~~~~~~~~~~
         requester_user_id: '1',
         ~~~~~~~~~~~~~~~~~
         request_date: new Date('2023-09-12T18:30:00.000Z'),
         status: '"Approved"',
         vendor_selection_method: '"Manual Selection"',
         project_id: '137',
         ~~~~~~~~~~
         selected_vendor_id: '1',
         ~~~~~~~~~~~~~~~~~~
         total_cost: '122334',
                     ~~~~~~~~
         updated_by: '1',
                     ~~~
         purchase_request_details: undefined,
         purchase_request_documents: {},
         ~~~~~~~~~~~~~~~~~~~~~~~~~~
         updated_date: new Date('2023-09-15T10:15:59.211Z')
       }
     })

Argument purchase_request_id: Got invalid value '1' on prisma.updateOnepurchase_request. Provided String, expected Int.
Unknown arg `indent_request_id` in data.indent_request_id for type purchase_requestUpdateInput. Did you mean `indent_request_data`? Available args:
type purchase_requestUpdateInput {
  request_date?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null
  status?: String | NullableStringFieldUpdateOperationsInput | Null
  vendor_selection_method?: String | NullableStringFieldUpdateOperationsInput | Null
  total_cost?: Float | NullableFloatFieldUpdateOperationsInput | Null
  is_delete?: Boolean | BoolFieldUpdateOperationsInput
  created_date?: DateTime | DateTimeFieldUpdateOperationsInput
  updated_date?: DateTime | DateTimeFieldUpdateOperationsInput
  created_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  updated_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  indent_request_data?: indent_requestUpdateOneRequiredWithoutPurchase_requestNestedInput
  requester_user_data?: usersUpdateOneRequiredWithoutPurchase_requestNestedInput
  project_data?: projectUpdateOneWithoutPurchase_requestNestedInput
  selected_vendor_data?: vendorUpdateOneWithoutPurchase_requestNestedInput
  purchase_order?: purchase_orderUpdateManyWithoutPurchase_request_dataNestedInput
}
Unknown arg `requester_user_id` in data.requester_user_id for type purchase_requestUpdateInput. Did you mean `requester_user_data`? Available args:
type purchase_requestUpdateInput {
  request_date?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null
  status?: String | NullableStringFieldUpdateOperationsInput | Null
  vendor_selection_method?: String | NullableStringFieldUpdateOperationsInput | Null
  total_cost?: Float | NullableFloatFieldUpdateOperationsInput | Null
  is_delete?: Boolean | BoolFieldUpdateOperationsInput
  created_date?: DateTime | DateTimeFieldUpdateOperationsInput
  updated_date?: DateTime | DateTimeFieldUpdateOperationsInput
  created_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  updated_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  indent_request_data?: indent_requestUpdateOneRequiredWithoutPurchase_requestNestedInput
  requester_user_data?: usersUpdateOneRequiredWithoutPurchase_requestNestedInput
  project_data?: projectUpdateOneWithoutPurchase_requestNestedInput
  selected_vendor_data?: vendorUpdateOneWithoutPurchase_requestNestedInput
  purchase_order?: purchase_orderUpdateManyWithoutPurchase_request_dataNestedInput
}
Unknown arg `project_id` in data.project_id for type purchase_requestUpdateInput. Did you mean `project_data`? Available args:
type purchase_requestUpdateInput {
  request_date?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null
  status?: String | NullableStringFieldUpdateOperationsInput | Null
  vendor_selection_method?: String | NullableStringFieldUpdateOperationsInput | Null
  total_cost?: Float | NullableFloatFieldUpdateOperationsInput | Null
  is_delete?: Boolean | BoolFieldUpdateOperationsInput
  created_date?: DateTime | DateTimeFieldUpdateOperationsInput
  updated_date?: DateTime | DateTimeFieldUpdateOperationsInput
  created_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  updated_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  indent_request_data?: indent_requestUpdateOneRequiredWithoutPurchase_requestNestedInput
  requester_user_data?: usersUpdateOneRequiredWithoutPurchase_requestNestedInput
  project_data?: projectUpdateOneWithoutPurchase_requestNestedInput
  selected_vendor_data?: vendorUpdateOneWithoutPurchase_requestNestedInput
  purchase_order?: purchase_orderUpdateManyWithoutPurchase_request_dataNestedInput
}
Unknown arg `selected_vendor_id` in data.selected_vendor_id for type purchase_requestUpdateInput. Did you mean `selected_vendor_data`? Available args:
type purchase_requestUpdateInput {
  request_date?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null
  status?: String | NullableStringFieldUpdateOperationsInput | Null
  vendor_selection_method?: String | NullableStringFieldUpdateOperationsInput | Null
  total_cost?: Float | NullableFloatFieldUpdateOperationsInput | Null
  is_delete?: Boolean | BoolFieldUpdateOperationsInput
  created_date?: DateTime | DateTimeFieldUpdateOperationsInput
  updated_date?: DateTime | DateTimeFieldUpdateOperationsInput
  created_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  updated_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  indent_request_data?: indent_requestUpdateOneRequiredWithoutPurchase_requestNestedInput
  requester_user_data?: usersUpdateOneRequiredWithoutPurchase_requestNestedInput
  project_data?: projectUpdateOneWithoutPurchase_requestNestedInput
  selected_vendor_data?: vendorUpdateOneWithoutPurchase_requestNestedInput
  purchase_order?: purchase_orderUpdateManyWithoutPurchase_request_dataNestedInput
}
Argument total_cost: Got invalid value '122334' on prisma.updateOnepurchase_request. Provided String, expected Float or NullableFloatFieldUpdateOperationsInput or Null.
Argument updated_by: Got invalid value '1' on prisma.updateOnepurchase_request. Provided String, expected Int or NullableIntFieldUpdateOperationsInput or Null.
Unknown arg `purchase_request_documents` in data.purchase_request_documents for type purchase_requestUpdateInput. Did you mean `indent_request_data`? Available args:
type purchase_requestUpdateInput {
  request_date?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null
  status?: String | NullableStringFieldUpdateOperationsInput | Null
  vendor_selection_method?: String | NullableStringFieldUpdateOperationsInput | Null
  total_cost?: Float | NullableFloatFieldUpdateOperationsInput | Null
  is_delete?: Boolean | BoolFieldUpdateOperationsInput
  created_date?: DateTime | DateTimeFieldUpdateOperationsInput
  updated_date?: DateTime | DateTimeFieldUpdateOperationsInput
  created_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  updated_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  indent_request_data?: indent_requestUpdateOneRequiredWithoutPurchase_requestNestedInput
  requester_user_data?: usersUpdateOneRequiredWithoutPurchase_requestNestedInput
  project_data?: projectUpdateOneWithoutPurchase_requestNestedInput
  selected_vendor_data?: vendorUpdateOneWithoutPurchase_requestNestedInput
  purchase_order?: purchase_orderUpdateManyWithoutPurchase_request_dataNestedInput
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/updatePurchaseRequest << ERRSTRING >>Error: 
Invalid `transaction.purchase_request.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseRequest.dao.ts:66:64

  63 const currentDate = new Date();
  64 const formatted_request_date = request_date ? new Date(request_date) : null;
  65 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 66 const purchaseRequest = await transaction.purchase_request.update({
       where: {
         purchase_request_id: 1
       },
       data: {
         indent_request_id: 10,
         requester_user_id: 1,
         request_date: new Date('2023-09-12T18:30:00.000Z'),
         status: '"Approved"',
         vendor_selection_method: '"Manual Selection"',
         project_id: 137,
         selected_vendor_id: 1,
         total_cost: 122334,
         updated_by: 1,
         purchase_request_details: undefined,
         purchase_request_documents: {},
         ~~~~~~~~~~~~~~~~~~~~~~~~~~
         updated_date: new Date('2023-09-15T10:18:36.494Z')
       }
     })

Unknown arg `purchase_request_documents` in data.purchase_request_documents for type purchase_requestUncheckedUpdateInput. Did you mean `purchase_request_id`? Available args:
type purchase_requestUncheckedUpdateInput {
  purchase_request_id?: Int | IntFieldUpdateOperationsInput
  indent_request_id?: Int | IntFieldUpdateOperationsInput
  requester_user_id?: Int | IntFieldUpdateOperationsInput
  request_date?: DateTime | NullableDateTimeFieldUpdateOperationsInput | Null
  status?: String | NullableStringFieldUpdateOperationsInput | Null
  vendor_selection_method?: String | NullableStringFieldUpdateOperationsInput | Null
  project_id?: Int | NullableIntFieldUpdateOperationsInput | Null
  selected_vendor_id?: Int | NullableIntFieldUpdateOperationsInput | Null
  total_cost?: Float | NullableFloatFieldUpdateOperationsInput | Null
  is_delete?: Boolean | BoolFieldUpdateOperationsInput
  created_date?: DateTime | DateTimeFieldUpdateOperationsInput
  updated_date?: DateTime | DateTimeFieldUpdateOperationsInput
  created_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  updated_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  purchase_order?: purchase_orderUncheckedUpdateManyWithoutPurchase_request_dataNestedInput
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/updatePurchaseRequest << ERRSTRING >>TypeError: purchase_request_documents is not iterable
[31merror[39m: ERRORS: status code: Error << DETAILS >>/updatePurchaseRequest << ERRSTRING >>TypeError: purchase_request_documents is not iterable
[31merror[39m: ERRORS: status code: Error << DETAILS >>/updatePurchaseRequest << ERRSTRING >>TypeError: purchase_request_documents is not iterable
[31merror[39m: ERRORS: status code: Error << DETAILS >>/updatePurchaseRequest << ERRSTRING >>TypeError: Cannot read properties of undefined (reading 'path')
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createPurchaseRequest << ERRSTRING >>SyntaxError: Unexpected token o in JSON at position 1
[31merror[39m: ERRORS: status code: Error << DETAILS >>/updatePurchaseRequest << ERRSTRING >>TypeError: Cannot read properties of null (reading 'length')
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "%"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "%"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$21"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "'$21'"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "'$21'"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$21"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$21"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$22"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$22"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$22"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$21"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$22"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$22"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$21"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$22"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$22"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$22"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>Error: `$queryRaw` is a tag function, please use it like the following:
```
const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
```

Or read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw

[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>TypeError: transaction.$queryRawRaw is not a function
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>Error: `$queryRaw` is a tag function, please use it like the following:
```
const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
```

Or read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw

[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>TypeError: Cannot read properties of undefined (reading 'query')
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>Error: `$queryRaw` is a tag function, please use it like the following:
```
const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
```

Or read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw

[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>Error: `$queryRaw` is a tag function, please use it like the following:
```
const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
```

Or read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw

[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>Error: `$queryRaw` is a tag function, please use it like the following:
```
const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
```

Or read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw

[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>Error: `$queryRaw` is a tag function, please use it like the following:
```
const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
```

Or read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw

[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>Error: `$queryRaw` is a tag function, please use it like the following:
```
const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
```

Or read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw

[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>Error: `$queryRaw` is a tag function, please use it like the following:
```
const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
```

Or read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw

[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `42601`. Message: `db error: ERROR: syntax error at or near "$22"`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>error: syntax error at or near "'desc'"
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchVendor << ERRSTRING >>error: ORDER BY "updated_date" is ambiguous
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createPurchaseOrderWithItem << ERRSTRING >>Error: 
Invalid `transaction.purchase_order_item.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:225:73

  222 const order_quantity = value.order_quantity;
  223 const unit_price = value.unit_price;
  224 
â†’ 225 const purchaseOrderItem = await transaction.purchase_order_item.create({
        data: {
          new_purchase_order_id: 3,
          ~~~~~~~~~~~~~~~~~~~~~
          item_id: 124,
          ~~~~~~~
          order_quantity: 10,
          unit_price: 10000,
      ?   created_by?: Int | null,
          created_date: new Date('2023-09-18T10:53:26.627Z'),
          updated_date: new Date('2023-09-18T10:53:26.627Z'),
          is_delete: false,
      +   purchase_order_data: {
      +     create?: purchase_orderCreateWithoutPurchase_order_itemInput | purchase_orderUncheckedCreateWithoutPurchase_order_itemInput,
      +     connectOrCreate?: purchase_orderCreateOrConnectWithoutPurchase_order_itemInput,
      +     connect?: purchase_orderWhereUniqueInput
      +   },
      ?   updated_by?: Int | null,
      ?   item_data?: {
      ?     create?: itemCreateWithoutPurchase_order_itemInput | itemUncheckedCreateWithoutPurchase_order_itemInput,
      ?     connectOrCreate?: itemCreateOrConnectWithoutPurchase_order_itemInput,
      ?     connect?: itemWhereUniqueInput
      ?   }
        }
      })

Unknown arg `new_purchase_order_id` in data.new_purchase_order_id for type purchase_order_itemCreateInput. Did you mean `purchase_order_data`?
Unknown arg `item_id` in data.item_id for type purchase_order_itemCreateInput. Did you mean `item_data`?
Argument purchase_order_data for data.purchase_order_data is missing.

Note: Lines with + are required, lines with ? are optional.

[31merror[39m: ERRORS: status code: Error << DETAILS >>/updatePurchaseOrderItem << ERRSTRING >>Error: 
Invalid `transaction.purchase_order_item.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseOrderItem.dao.ts:49:69

  46 try {
  47   const currentDate = new Date();
  48   const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 49   const purchaseOrderItem = await transaction.purchase_order_item.update({
         where: {
           purchase_order_item_id: '1'
                                   ~~~
         },
         data: {
           purchase_order_id: '1',
           ~~~~~~~~~~~~~~~~~
           item_id: '167',
           ~~~~~~~
           order_quantity: '50',
                           ~~~~
           unit_price: '484',
                       ~~~~~
           updated_by: '1',
                       ~~~
           purchase_order_item_documents: [
             {
               index: 0,
               path: 'https://zpaisa-purchase-sale-docs.s3.ap-south-1.amazonaws.com/purchase-order-item/purchase-order-item-1-0/purchase_order_item_documents-1695036200789-102639269-Aalam Image.png',
               folder: 'purchase-order-item',
               code: 'purchase-order-item-1-0'
             },
             {
               index: 1,
               path: 'https://zpaisa-purchase-sale-docs.s3.ap-south-1.amazonaws.com/purchase-order-item/purchase-order-item-1-1/purchase_order_item_documents-1695036200793-109833530-Aalam Icon.png',
               folder: 'purchase-order-item',
               code: 'purchase-order-item-1-1'
             }
           ],
           updated_date: new Date('2023-09-18T11:23:24.495Z')
         }
       })

Argument purchase_order_item_id: Got invalid value '1' on prisma.updateOnepurchase_order_item. Provided String, expected Int.
Unknown arg `purchase_order_id` in data.purchase_order_id for type purchase_order_itemUpdateInput. Did you mean `purchase_order_data`? Available args:
type purchase_order_itemUpdateInput {
  order_quantity?: Int | NullableIntFieldUpdateOperationsInput | Null
  unit_price?: Float | NullableFloatFieldUpdateOperationsInput | Null
  purchase_order_item_documents?: NullableJsonNullValueInput | Json
  is_delete?: Boolean | BoolFieldUpdateOperationsInput
  created_date?: DateTime | DateTimeFieldUpdateOperationsInput
  updated_date?: DateTime | DateTimeFieldUpdateOperationsInput
  created_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  updated_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  purchase_order_data?: purchase_orderUpdateOneRequiredWithoutPurchase_order_itemNestedInput
  item_data?: itemUpdateOneWithoutPurchase_order_itemNestedInput
}
Unknown arg `item_id` in data.item_id for type purchase_order_itemUpdateInput. Did you mean `item_data`? Available args:
type purchase_order_itemUpdateInput {
  order_quantity?: Int | NullableIntFieldUpdateOperationsInput | Null
  unit_price?: Float | NullableFloatFieldUpdateOperationsInput | Null
  purchase_order_item_documents?: NullableJsonNullValueInput | Json
  is_delete?: Boolean | BoolFieldUpdateOperationsInput
  created_date?: DateTime | DateTimeFieldUpdateOperationsInput
  updated_date?: DateTime | DateTimeFieldUpdateOperationsInput
  created_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  updated_by?: Int | NullableIntFieldUpdateOperationsInput | Null
  purchase_order_data?: purchase_orderUpdateOneRequiredWithoutPurchase_order_itemNestedInput
  item_data?: itemUpdateOneWithoutPurchase_order_itemNestedInput
}
Argument order_quantity: Got invalid value '50' on prisma.updateOnepurchase_order_item. Provided String, expected Int or NullableIntFieldUpdateOperationsInput or Null.
Argument unit_price: Got invalid value '484' on prisma.updateOnepurchase_order_item. Provided String, expected Float or NullableFloatFieldUpdateOperationsInput or Null.
Argument updated_by: Got invalid value '1' on prisma.updateOnepurchase_order_item. Provided String, expected Int or NullableIntFieldUpdateOperationsInput or Null.


[31merror[39m: ERRORS: status code: Error << DETAILS >>/updatePurchaseOrderItem << ERRSTRING >>TypeError: Cannot read properties of undefined (reading 'purchase_order_item_documents')
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createPurchaseOrderWithItem << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.purchase_order_item.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:225:73

  222 const order_quantity = value.order_quantity;
  223 const unit_price = value.unit_price;
  224 
â†’ 225 const purchaseOrderItem = await transaction.purchase_order_item.create(
Foreign key constraint failed on the field: `fk_purchase_order_item_item_id (index)`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createPurchaseOrderWithItem << ERRSTRING >>TypeError: transaction.$rollback is not a function
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createPurchaseOrderWithItem << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `tx.purchase_order_item.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:300:68

  297 const order_quantity = value.order_quantity;
  298 const unit_price = value.unit_price;
  299 
â†’ 300 const purchaseOrderItem = await tx.purchase_order_item.create(
Foreign key constraint failed on the field: `fk_purchase_order_item_item_id (index)`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/updateProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `tx.project_site.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\project.dao.ts:215:57

  212     where: { project_site_id: project_site_id },
  213   });
  214 } else {
â†’ 215   const projectSite = await tx.project_site.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/updateProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `tx.project_site.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\project.dao.ts:215:57

  212     where: { project_site_id: project_site_id },
  213   });
  214 } else {
â†’ 215   const projectSite = await tx.project_site.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createPurchaseOrderWithItem << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `tx.purchase_order_item.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:230:68

  227 const order_quantity = value.order_quantity;
  228 const unit_price = value.unit_price;
  229 
â†’ 230 const purchaseOrderItem = await tx.purchase_order_item.create(
Foreign key constraint failed on the field: `fk_purchase_order_item_item_id (index)`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createLeadEnquiry << ERRSTRING >>TypeError: transaction.$transaction is not a function
[31merror[39m: ERRORS: status code: Error << DETAILS >>/updateLeadEnquiry << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.lead_enquiry_product_item.update()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\leadEnquiry.dao.ts:267:59

  264   });
  265 } else {
  266   const leadEnquiryProductItemResult =
â†’ 267     await transaction.lead_enquiry_product_item.update(
An operation failed because it depends on one or more records that were required but not found. No 'item' record(s) (needed to inline the relation on 'lead_enquiry_product_item' record(s)) was found for a nested connect on one-to-many relation 'itemTolead_enquiry_product_item'.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllItemsInBomDetailsByProjectId << ERRSTRING >>TypeError: Cannot read properties of undefined (reading 'length')
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createPurchaseRequest << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.vendor_quotes.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseRequest.dao.ts:48:60

  45 for (const vendor_quotes of purchase_request_details) {
  46   const vendor_id = vendor_quotes.vendor_id;
  47 
â†’ 48   const vendorQuotes = await transaction.vendor_quotes.create(
Foreign key constraint failed on the field: `fk_vendor_quotes_vendor_id (index)`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createPurchaseRequest << ERRSTRING >>Error: 
Invalid `transaction.vendor_quotes.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseRequest.dao.ts:54:60

  51   quotationIdGeneratorQuery
  52 );
  53 
â†’ 54 const vendorQuotes = await transaction.vendor_quotes.create({
       data: {
         vendor_id: 1,
         purchase_request_id: 9,
         quotation_date: new Date('2023-09-19T00:00:00.000Z'),
         quotation_status: 'Pending',
         total_quotation_amount: 0,
         remarks: null,
         quotation_details: [
           {
             item_id: 165,
             quantity: 20,
             item_name: 'Cement'
           }
         ],
         quotation_id: [
           {
             concat: 'VQUO2023003'
           }
         ],
         ~~~~~~~~~~~~~~~~~~~~~~~~~
         created_by: 1,
         created_date: new Date('2023-09-19T12:49:24.241Z'),
         updated_date: new Date('2023-09-19T12:49:24.241Z'),
         is_delete: false
       }
     })

Argument quotation_id: Got invalid value 
[
  {
    concat: 'VQUO2023003'
  }
]
on prisma.createOnevendor_quotes. Provided List<Json>, expected String.


[31merror[39m: ERRORS: status code: Error << DETAILS >>/updateStatusAndDocument << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst(
Error converting field "order_id" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createPurchaseOrderWithItem << ERRSTRING >>Error: 
Invalid `tx.purchase_order.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:218:55

  215 
  216 const result = await transaction
  217   .$transaction(async (tx) => {
â†’ 218     const purchaseOrder = await tx.purchase_order.create({
            data: {
              purchase_request_id: 32,
              ~~~~~~~~~~~~~~~~~~~
              vendor_id: 8,
              ~~~~~~~~~
              order_date: new Date('2023-09-20T00:00:00.000Z'),
              status: 'Processing',
              total_cost: 0,
              order_remark: 'Order Requested',
          ?   created_by?: Int | null,
              created_date: new Date('2023-09-20T11:11:43.445Z'),
              updated_date: new Date('2023-09-20T11:11:43.445Z'),
              is_delete: false,
          +   order_id: String,
          ?   purchase_order_documents?: NullableJsonNullValueInput | Json,
          ?   updated_by?: Int | null,
          ?   purchase_request_data?: {
          ?     create?: purchase_requestCreateWithoutPurchase_orderInput | purchase_requestUncheckedCreateWithoutPurchase_orderInput,
          ?     connectOrCreate?: purchase_requestCreateOrConnectWithoutPurchase_orderInput,
          ?     connect?: purchase_requestWhereUniqueInput
          ?   },
          ?   vendor_data?: {
          ?     create?: vendorCreateWithoutPurchase_orderInput | vendorUncheckedCreateWithoutPurchase_orderInput,
          ?     connectOrCreate?: vendorCreateOrConnectWithoutPurchase_orderInput,
          ?     connect?: vendorWhereUniqueInput
          ?   },
          ?   purchase_order_item?: {
          ?     create?: purchase_order_itemCreateWithoutPurchase_order_dataInput | purchase_order_itemCreateWithoutPurchase_order_dataInput | purchase_order_itemUncheckedCreateWithoutPurchase_order_dataInput | purchase_order_itemUncheckedCreateWithoutPurchase_order_dataInput,
          ?     connectOrCreate?: purchase_order_itemCreateOrConnectWithoutPurchase_order_dataInput | purchase_order_itemCreateOrConnectWithoutPurchase_order_dataInput,
          ?     createMany?: purchase_order_itemCreateManyPurchase_order_dataInputEnvelope,
          ?     connect?: purchase_order_itemWhereUniqueInput | purchase_order_itemWhereUniqueInput
          ?   }
            }
          })

Unknown arg `purchase_request_id` in data.purchase_request_id for type purchase_orderCreateInput. Did you mean `purchase_request_data`?
Unknown arg `vendor_id` in data.vendor_id for type purchase_orderCreateInput. Did you mean `order_id`?
Argument order_id for data.order_id is missing.

Note: Lines with + are required, lines with ? are optional.

[31merror[39m: ERRORS: status code: Error << DETAILS >>/createPurchaseOrderWithItem << ERRSTRING >>Error: 
Invalid `tx.purchase_order.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:218:55

  215 
  216 const result = await transaction
  217   .$transaction(async (tx) => {
â†’ 218     const purchaseOrder = await tx.purchase_order.create({
            data: {
              purchase_request_id: 32,
              ~~~~~~~~~~~~~~~~~~~
              vendor_id: 1,
              ~~~~~~~~~
              order_date: new Date('2023-09-18T00:00:00.000Z'),
              status: 'Processing',
              total_cost: 180923,
              order_remark: 'Order Requested',
          ?   created_by?: Int | null,
              created_date: new Date('2023-09-20T11:16:01.085Z'),
              updated_date: new Date('2023-09-20T11:16:01.085Z'),
              is_delete: false,
          +   order_id: String,
          ?   purchase_order_documents?: NullableJsonNullValueInput | Json,
          ?   updated_by?: Int | null,
          ?   purchase_request_data?: {
          ?     create?: purchase_requestCreateWithoutPurchase_orderInput | purchase_requestUncheckedCreateWithoutPurchase_orderInput,
          ?     connectOrCreate?: purchase_requestCreateOrConnectWithoutPurchase_orderInput,
          ?     connect?: purchase_requestWhereUniqueInput
          ?   },
          ?   vendor_data?: {
          ?     create?: vendorCreateWithoutPurchase_orderInput | vendorUncheckedCreateWithoutPurchase_orderInput,
          ?     connectOrCreate?: vendorCreateOrConnectWithoutPurchase_orderInput,
          ?     connect?: vendorWhereUniqueInput
          ?   },
          ?   purchase_order_item?: {
          ?     create?: purchase_order_itemCreateWithoutPurchase_order_dataInput | purchase_order_itemCreateWithoutPurchase_order_dataInput | purchase_order_itemUncheckedCreateWithoutPurchase_order_dataInput | purchase_order_itemUncheckedCreateWithoutPurchase_order_dataInput,
          ?     connectOrCreate?: purchase_order_itemCreateOrConnectWithoutPurchase_order_dataInput | purchase_order_itemCreateOrConnectWithoutPurchase_order_dataInput,
          ?     createMany?: purchase_order_itemCreateManyPurchase_order_dataInputEnvelope,
          ?     connect?: purchase_order_itemWhereUniqueInput | purchase_order_itemWhereUniqueInput
          ?   }
            }
          })

Unknown arg `purchase_request_id` in data.purchase_request_id for type purchase_orderCreateInput. Did you mean `purchase_request_data`?
Unknown arg `vendor_id` in data.vendor_id for type purchase_orderCreateInput. Did you mean `order_id`?
Argument order_id for data.order_id is missing.

Note: Lines with + are required, lines with ? are optional.

[31merror[39m: ERRORS: status code: Error << DETAILS >>/createStockOutward << ERRSTRING >>Error: 
Invalid `transaction.stock_outward_details.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\stockOutward.dao.ts:54:51

  51 
  52 if (is_delete === false) {
  53   const stockOutwardDetails =
â†’ 54     await transaction.stock_outward_details.create({
           data: {
             stock_outward_id: undefined,
             item_id: 167,
             ~~~~~~~
             outward_quantity: 50,
             uom_id: 4,
             ~~~~~~
             created_by: 1,
             created_date: new Date('2023-09-20T12:45:58.717Z'),
             updated_date: new Date('2023-09-20T12:45:58.717Z'),
             is_delete: false
           }
         })

Unknown arg `item_id` in data.item_id for type stock_outward_detailsCreateInput. Did you mean `item_data`? Available args:
type stock_outward_detailsCreateInput {
  outward_quantity?: Int | Null
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  stock_outward_data?: stock_outwardCreateNestedOneWithoutStock_outward_detailsInput
  item_data?: itemCreateNestedOneWithoutStock_outward_detailsInput
  uom_data?: uomCreateNestedOneWithoutStock_outward_detailsInput
}
Unknown arg `uom_id` in data.uom_id for type stock_outward_detailsCreateInput. Did you mean `uom_data`? Available args:
type stock_outward_detailsCreateInput {
  outward_quantity?: Int | Null
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  stock_outward_data?: stock_outwardCreateNestedOneWithoutStock_outward_detailsInput
  item_data?: itemCreateNestedOneWithoutStock_outward_detailsInput
  uom_data?: uomCreateNestedOneWithoutStock_outward_detailsInput
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/createStockOutward << ERRSTRING >>Error: 
Invalid `transaction.stock_outward_details.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\stockOutward.dao.ts:54:51

  51 
  52 if (is_delete === false) {
  53   const stockOutwardDetails =
â†’ 54     await transaction.stock_outward_details.create({
           data: {
             stock_outward_id: undefined,
             item_id: 167,
             ~~~~~~~
             outward_quantity: 50,
             uom_id: 4,
             ~~~~~~
             created_by: 1,
             created_date: new Date('2023-09-20T12:48:44.082Z'),
             updated_date: new Date('2023-09-20T12:48:44.082Z'),
             is_delete: false
           }
         })

Unknown arg `item_id` in data.item_id for type stock_outward_detailsCreateInput. Did you mean `item_data`? Available args:
type stock_outward_detailsCreateInput {
  outward_quantity?: Int | Null
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  stock_outward_data?: stock_outwardCreateNestedOneWithoutStock_outward_detailsInput
  item_data?: itemCreateNestedOneWithoutStock_outward_detailsInput
  uom_data?: uomCreateNestedOneWithoutStock_outward_detailsInput
}
Unknown arg `uom_id` in data.uom_id for type stock_outward_detailsCreateInput. Did you mean `uom_data`? Available args:
type stock_outward_detailsCreateInput {
  outward_quantity?: Int | Null
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  stock_outward_data?: stock_outwardCreateNestedOneWithoutStock_outward_detailsInput
  item_data?: itemCreateNestedOneWithoutStock_outward_detailsInput
  uom_data?: uomCreateNestedOneWithoutStock_outward_detailsInput
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/createStockOutward << ERRSTRING >>Error: 
Invalid `transaction.stock_outward_details.create()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\stockOutward.dao.ts:57:51

  54 
  55 if (is_delete === false) {
  56   const stockOutwardDetails =
â†’ 57     await transaction.stock_outward_details.create({
           data: {
             stock_outward_id: undefined,
             item_id: 167,
             ~~~~~~~
             outward_quantity: 50,
             uom_id: 4,
             ~~~~~~
             created_by: 1,
             created_date: new Date('2023-09-20T12:49:52.705Z'),
             updated_date: new Date('2023-09-20T12:49:52.705Z'),
             is_delete: false
           }
         })

Unknown arg `item_id` in data.item_id for type stock_outward_detailsCreateInput. Did you mean `item_data`? Available args:
type stock_outward_detailsCreateInput {
  outward_quantity?: Int | Null
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  stock_outward_data?: stock_outwardCreateNestedOneWithoutStock_outward_detailsInput
  item_data?: itemCreateNestedOneWithoutStock_outward_detailsInput
  uom_data?: uomCreateNestedOneWithoutStock_outward_detailsInput
}
Unknown arg `uom_id` in data.uom_id for type stock_outward_detailsCreateInput. Did you mean `uom_data`? Available args:
type stock_outward_detailsCreateInput {
  outward_quantity?: Int | Null
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  stock_outward_data?: stock_outwardCreateNestedOneWithoutStock_outward_detailsInput
  item_data?: itemCreateNestedOneWithoutStock_outward_detailsInput
  uom_data?: uomCreateNestedOneWithoutStock_outward_detailsInput
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllStockOutwards << ERRSTRING >>Error: 
Invalid `transaction.stock_outward.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\stockOutward.dao.ts:216:58

  213 const getAll = async (connectionObj = null) => {
  214   try {
  215     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 216     const stockOutward = await transaction.stock_outward.findMany({
            where: {
              is_delete: false
            },
            include: {
              project_data: true,
              site_data: true,
              site_engineer_data: {
                select: {
                  first_name: true,
                  last_name: true
                }
              },
              stock_outward_details: {
                stock_outward_details: {
                ~~~~~~~~~~~~~~~~~~~~~
                  where: {
                    is_delete: false
                  },
                  include: {
                    item_data: true,
                    uom_data: {
                      select: {
                        name: true
                      }
                    }
                  },
                  orderBy: [
                    {
                      updated_date: 'desc'
                    }
                  ]
                }
              }
            },
            orderBy: [
              {
                updated_date: 'desc'
              }
            ]
          })

Unknown arg `stock_outward_details` in include.stock_outward_details.stock_outward_details for type stock_outward_details. Available args:

type stock_outward_details {
  where?: stock_outward_detailsWhereInput
  orderBy?: List<stock_outward_detailsOrderByWithRelationInput> | stock_outward_detailsOrderByWithRelationInput
  cursor?: stock_outward_detailsWhereUniqueInput
  take?: Int
  skip?: Int
  distinct?: Stock_outward_detailsScalarFieldEnum | List<Stock_outward_detailsScalarFieldEnum>
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStockOutward << ERRSTRING >>TypeError: Cannot read properties of undefined (reading 'push')
[31merror[39m: ERRORS: status code: Error << DETAILS >>/processFileUpload << ERRSTRING >>TypeError: files.file is not iterable
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.project_inventory.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\projectInventory.dao.ts:242:66

  239 const getByProjectId = async (project_id: number, connectionObj = null) => {
  240   try {
  241     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 242     const projectInventory = await transaction.project_inventory.findMany({
            where: {
              project_id: 137,
              is_delete: false
            },
            include: {
              project_data: true,
              item_data: {
                include: {
                  uom: {
                    select: {
                      uom_name: true
                    },
                    include: {
          ?           uom_id?: true,
          ?           name?: true,
          ?           description?: true,
          ?           created_date?: true,
          ?           updated_date?: true,
          ?           created_by?: true,
          ?           updated_by?: true,
          ?           uom_type?: true,
          ?           is_delete?: true,
          ?           item?: true,
          ?           bom_detail?: true,
          ?           project_workbreak_down?: true,
          ?           labour?: true,
          ?           machinery?: true,
          ?           stock_outward_details?: true,
          ?           _count?: true
                    }
                  }
                }
              }
            }
          })


Unknown field `uom_name` for select statement on model uom. Available options are listed in green. Did you mean `uom_type`?

[31merror[39m: ERRORS: status code: Error << DETAILS >>/processFileUpload << ERRSTRING >>TypeError: files.file is not iterable
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createExpense << ERRSTRING >>Error: 
Invalid `transaction.expense.findFirst()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\expense.dao.ts:389:47

  386 ) => {
  387   try {
  388     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 389     const expense = await transaction.expense.findFirst({
            where: {
              project_id: 137,
              site_id: 17,
              is_delete: false
            },
            include: {
              expense_details: {
                where: {
                  is_delete: false
                },
                include: {
                  progressed_by_data: {
                    select: {
                      first_name: true,
                      last_name: true
                    },
                    expense_master_data: true
                    ~~~~~~~~~~~~~~~~~~~
                  }
                }
              },
              site_data: {
                select: {
                  name: true
                }
              },
              project_data: {
                select: {
                  project_name: true
                }
              }
            }
          })

Unknown arg `expense_master_data` in include.expense_details.include.progressed_by_data.expense_master_data for type users. Did you mean `select`? Available args:
type progressed_by_data {

}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/createExpense << ERRSTRING >>Error: 
Invalid `transaction.expense.findFirst()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\expense.dao.ts:389:47

  386 ) => {
  387   try {
  388     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 389     const expense = await transaction.expense.findFirst({
            where: {
              project_id: 137,
              site_id: 17,
              is_delete: false
            },
            include: {
              expense_details: {
                where: {
                  is_delete: false
                },
                include: {
                  progressed_by_data: {
                    select: {
                      first_name: true,
                      last_name: true
                    },
                    expense_master_data: true
                    ~~~~~~~~~~~~~~~~~~~
                  }
                }
              },
              site_data: {
                select: {
                  name: true
                }
              },
              project_data: {
                select: {
                  project_name: true
                }
              }
            }
          })

Unknown arg `expense_master_data` in include.expense_details.include.progressed_by_data.expense_master_data for type users. Did you mean `select`? Available args:
type progressed_by_data {

}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/createExpense << ERRSTRING >>Error: 
Invalid `transaction.expense.findFirst()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\expense.dao.ts:389:47

  386 ) => {
  387   try {
  388     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 389     const expense = await transaction.expense.findFirst({
            where: {
              project_id: 137,
              site_id: 17,
              is_delete: false
            },
            include: {
              expense_details: {
                where: {
                  is_delete: false
                },
                include: {
                  progressed_by_data: {
                    select: {
                      first_name: true,
                      last_name: true
                    },
                    expense_master_data: true
                    ~~~~~~~~~~~~~~~~~~~
                  }
                }
              },
              site_data: {
                select: {
                  name: true
                }
              },
              project_data: {
                select: {
                  project_name: true
                }
              }
            }
          })

Unknown arg `expense_master_data` in include.expense_details.include.progressed_by_data.expense_master_data for type users. Did you mean `select`? Available args:
type progressed_by_data {

}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchExpense << ERRSTRING >>Error: 
Invalid `transaction.expense.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\expense.dao.ts:314:47

  311 try {
  312   const transaction = connectionObj !== null ? connectionObj : prisma;
  313   const filter = filters.filterExpense;
â†’ 314   const expense = await transaction.expense.findMany({
          where: {
            is_delete: false
          },
          include: {
            expense_details: {
              include: {
                progressed_by_data: {
                  select: {
                    first_name: true,
                    last_name: true
                  },
                  expense_master_data: true
                  ~~~~~~~~~~~~~~~~~~~
                }
              }
            },
            site_data: {
              select: {
                name: true
              }
            },
            project_data: {
              select: {
                project_name: true
              }
            }
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `expense_master_data` in include.expense_details.include.progressed_by_data.expense_master_data for type users. Did you mean `select`? Available args:
type progressed_by_data {

}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchExpense << ERRSTRING >>Error: 
Invalid `transaction.expense.findMany()` invocation in
D:\Vijay\OmniFluxERP\Main\August\Aug-28\omni-flux\apps\api\src\dao\expense.dao.ts:322:47

  319 try {
  320   const transaction = connectionObj !== null ? connectionObj : prisma;
  321   const filter = filters.filterExpense;
â†’ 322   const expense = await transaction.expense.findMany({
          where: {
            is_delete: false
          },
          include: {
            expense_details: {
              include: {
                progressed_by_data: {
                  select: {
                    first_name: true,
                    last_name: true
                  },
                  expense_master_data: true
                  ~~~~~~~~~~~~~~~~~~~
                }
              }
            },
            site_data: {
              select: {
                name: true
              }
            },
            project_data: {
              select: {
                project_name: true
              }
            }
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `expense_master_data` in include.expense_details.include.progressed_by_data.expense_master_data for type users. Did you mean `select`? Available args:
type progressed_by_data {

}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/addItem << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.item.create()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\item.dao.ts:21:41

  18 const currentDate = new Date();
  19 const is_delete = false;
  20 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 21 const item = await transaction.item.create(
Foreign key constraint failed on the field: `fk_item_brand_id (index)`
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:328:47

  325 const getById = async (projectId: number, connectionObj = null) => {
  326   try {
  327     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 328     const project = await transaction.project.findFirst({
            where: {
              project_id: NaN,
                          ~~~
              is_delete: false
            },
            include: {
              project_site: {
                include: {
                  site_details: true
                }
              },
              bom_configuration: {
                where: {
                  is_delete: false
                },
                include: {
                  bom_type_data: {
                    select: {
                      master_data_name: true
                    }
                  }
                },
                orderBy: [
                  {
                    updated_date: 'desc'
                  }
                ]
              },
              user: {
                select: {
                  first_name: true,
                  last_name: true
                }
              },
              client: {
                select: {
                  name: true
                }
              },
              approvar_data: {
                select: {
                  first_name: true,
                  last_name: true
                }
              }
            }
          })

Argument project_id: Got invalid value NaN on prisma.findFirstproject. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndRoleType << ERRSTRING >>Error: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:328:47

  325 const getById = async (projectId: number, connectionObj = null) => {
  326   try {
  327     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 328     const project = await transaction.project.findFirst({
            where: {
              project_id: NaN,
                          ~~~
              is_delete: false
            },
            include: {
              project_site: {
                include: {
                  site_details: true
                }
              },
              bom_configuration: {
                where: {
                  is_delete: false
                },
                include: {
                  bom_type_data: {
                    select: {
                      master_data_name: true
                    }
                  }
                },
                orderBy: [
                  {
                    updated_date: 'desc'
                  }
                ]
              },
              user: {
                select: {
                  first_name: true,
                  last_name: true
                }
              },
              client: {
                select: {
                  name: true
                }
              },
              approvar_data: {
                select: {
                  first_name: true,
                  last_name: true
                }
              }
            }
          })

Argument project_id: Got invalid value NaN on prisma.findFirstproject. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:328:47

  325 const getById = async (projectId: number, connectionObj = null) => {
  326   try {
  327     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 328     const project = await transaction.project.findFirst({
            where: {
              project_id: NaN,
                          ~~~
              is_delete: false
            },
            include: {
              project_site: {
                include: {
                  site_details: true
                }
              },
              bom_configuration: {
                where: {
                  is_delete: false
                },
                include: {
                  bom_type_data: {
                    select: {
                      master_data_name: true
                    }
                  }
                },
                orderBy: [
                  {
                    updated_date: 'desc'
                  }
                ]
              },
              user: {
                select: {
                  first_name: true,
                  last_name: true
                }
              },
              client: {
                select: {
                  name: true
                }
              },
              approvar_data: {
                select: {
                  first_name: true,
                  last_name: true
                }
              }
            }
          })

Argument project_id: Got invalid value NaN on prisma.findFirstproject. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:328:47

  325 const getById = async (projectId: number, connectionObj = null) => {
  326   try {
  327     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 328     const project = await transaction.project.findFirst({
            where: {
              project_id: NaN,
                          ~~~
              is_delete: false
            },
            include: {
              project_site: {
                include: {
                  site_details: true
                }
              },
              bom_configuration: {
                where: {
                  is_delete: false
                },
                include: {
                  bom_type_data: {
                    select: {
                      master_data_name: true
                    }
                  }
                },
                orderBy: [
                  {
                    updated_date: 'desc'
                  }
                ]
              },
              user: {
                select: {
                  first_name: true,
                  last_name: true
                }
              },
              client: {
                select: {
                  name: true
                }
              },
              approvar_data: {
                select: {
                  first_name: true,
                  last_name: true
                }
              }
            }
          })

Argument project_id: Got invalid value NaN on prisma.findFirstproject. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:328:47

  325 const getById = async (projectId: number, connectionObj = null) => {
  326   try {
  327     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 328     const project = await transaction.project.findFirst({
            where: {
              project_id: NaN,
                          ~~~
              is_delete: false
            },
            include: {
              project_site: {
                include: {
                  site_details: true
                }
              },
              bom_configuration: {
                where: {
                  is_delete: false
                },
                include: {
                  bom_type_data: {
                    select: {
                      master_data_name: true
                    }
                  }
                },
                orderBy: [
                  {
                    updated_date: 'desc'
                  }
                ]
              },
              user: {
                select: {
                  first_name: true,
                  last_name: true
                }
              },
              client: {
                select: {
                  name: true
                }
              },
              approvar_data: {
                select: {
                  first_name: true,
                  last_name: true
                }
              }
            }
          })

Argument project_id: Got invalid value NaN on prisma.findFirstproject. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:328:47

  325 const getById = async (projectId: number, connectionObj = null) => {
  326   try {
  327     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 328     const project = await transaction.project.findFirst({
            where: {
              project_id: NaN,
                          ~~~
              is_delete: false
            },
            include: {
              project_site: {
                include: {
                  site_details: true
                }
              },
              bom_configuration: {
                where: {
                  is_delete: false
                },
                include: {
                  bom_type_data: {
                    select: {
                      master_data_name: true
                    }
                  }
                },
                orderBy: [
                  {
                    updated_date: 'desc'
                  }
                ]
              },
              user: {
                select: {
                  first_name: true,
                  last_name: true
                }
              },
              client: {
                select: {
                  name: true
                }
              },
              approvar_data: {
                select: {
                  first_name: true,
                  last_name: true
                }
              }
            }
          })

Argument project_id: Got invalid value NaN on prisma.findFirstproject. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.indent_request.findMany()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\indentRequest.dao.ts:414:60

  411 const getByProjectId = async (project_id: number, connectionObj = null) => {
  412   try {
  413     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 414     const indentRequest = await transaction.indent_request.findMany({
            where: {
              project_id: 141,
              is_delete: false
            },
            include: {
          ?   requester_user_data?: true,
          ?   approver_user_data?: true,
          ?   project_data?: true,
              site_data: true,
              ~~~~~~~~~
          ?   indent_request_details?: true,
          ?   purchase_request?: true,
          ?   _count?: true
            }
          })


Unknown field `site_data` for include statement on model indent_request. Available options are listed in green. Did you mean `project_data`?

[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.indent_request.findMany()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\indentRequest.dao.ts:414:60

  411 const getByProjectId = async (project_id: number, connectionObj = null) => {
  412   try {
  413     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 414     const indentRequest = await transaction.indent_request.findMany({
            where: {
              project_id: 141,
              is_delete: false
            },
            include: {
          ?   requester_user_data?: true,
          ?   approver_user_data?: true,
          ?   project_data?: true,
              site_data: true,
              ~~~~~~~~~
          ?   indent_request_details?: true,
          ?   purchase_request?: true,
          ?   _count?: true
            }
          })


Unknown field `site_data` for include statement on model indent_request. Available options are listed in green. Did you mean `project_data`?

[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchIndentRequest << ERRSTRING >>Error: 
Invalid `transaction.indent_request.findMany()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\indentRequest.dao.ts:363:60

  360 try {
  361   const transaction = connectionObj !== null ? connectionObj : prisma;
  362   const filter = filters.filterIndentRequest;
â†’ 363   const indentRequest = await transaction.indent_request.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                project_id: 141
              }
            ]
          },
          include: {
        ?   requester_user_data?: true,
        ?   approver_user_data?: true,
        ?   project_data?: true,
            site_data: true,
            ~~~~~~~~~
        ?   indent_request_details?: true,
        ?   purchase_request?: true,
        ?   _count?: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })


Unknown field `site_data` for include statement on model indent_request. Available options are listed in green. Did you mean `project_data`?

[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchIndentRequest << ERRSTRING >>Error: 
Invalid `transaction.indent_request.findMany()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\indentRequest.dao.ts:363:60

  360 try {
  361   const transaction = connectionObj !== null ? connectionObj : prisma;
  362   const filter = filters.filterIndentRequest;
â†’ 363   const indentRequest = await transaction.indent_request.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                project_id: 141
              }
            ]
          },
          include: {
        ?   requester_user_data?: true,
        ?   approver_user_data?: true,
        ?   project_data?: true,
            site_data: true,
            ~~~~~~~~~
        ?   indent_request_details?: true,
        ?   purchase_request?: true,
        ?   _count?: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })


Unknown field `site_data` for include statement on model indent_request. Available options are listed in green. Did you mean `project_data`?

[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.indent_request.findMany()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\indentRequest.dao.ts:414:60

  411 const getByProjectId = async (project_id: number, connectionObj = null) => {
  412   try {
  413     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 414     const indentRequest = await transaction.indent_request.findMany({
            where: {
              project_id: 141,
              is_delete: false
            },
            include: {
          ?   requester_user_data?: true,
          ?   approver_user_data?: true,
          ?   project_data?: true,
              site_data: true,
              ~~~~~~~~~
          ?   indent_request_details?: true,
          ?   purchase_request?: true,
          ?   _count?: true
            }
          })


Unknown field `site_data` for include statement on model indent_request. Available options are listed in green. Did you mean `project_data`?

[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.indent_request.findMany()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\indentRequest.dao.ts:414:60

  411 const getByProjectId = async (project_id: number, connectionObj = null) => {
  412   try {
  413     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 414     const indentRequest = await transaction.indent_request.findMany({
            where: {
              project_id: 141,
              is_delete: false
            },
            include: {
          ?   requester_user_data?: true,
          ?   approver_user_data?: true,
          ?   project_data?: true,
              site_data: true,
              ~~~~~~~~~
          ?   indent_request_details?: true,
          ?   purchase_request?: true,
          ?   _count?: true
            }
          })


Unknown field `site_data` for include statement on model indent_request. Available options are listed in green. Did you mean `project_data`?

[31merror[39m: ERRORS: status code: Error << DETAILS >>/createIndentRequest << ERRSTRING >>Error: 
Invalid `tx.indent_request.create()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\indentRequest.dao.ts:41:55

  38 
  39 const result = await transaction
  40   .$transaction(async (tx) => {
â†’ 41     const indentRequest = await tx.indent_request.create({
           data: {
             requester_user_id: 102,
             requested_date: new Date('2023-09-23T14:16:23.898Z'),
             request_status: '',
             priority: 'Medium',
             description: 'Checking',
             expected_delivery_date: new Date('2023-10-01T00:00:00.000Z'),
             total_cost: 1500,
             approver_user_id: undefined,
             approver_status: 'Pending',
             approved_date: null,
             rejected_date: null,
             approver_comments: undefined,
             project_id: 141,
             created_by: 102,
             site_id: '33',
             ~~~~~~~
             created_date: new Date('2023-09-23T14:16:45.611Z'),
             updated_date: new Date('2023-09-23T14:16:45.611Z'),
             is_delete: false
           }
         })

Unknown arg `site_id` in data.site_id for type indent_requestUncheckedCreateInput. Did you mean `select`? Available args:
type indent_requestUncheckedCreateInput {
  indent_request_id?: Int
  project_id?: Int | Null
  requester_user_id: Int
  requested_date: DateTime
  request_status?: String | Null
  priority?: String | Null
  description?: String | Null
  expected_delivery_date?: DateTime | Null
  total_cost?: Float | Null
  approver_user_id?: Int | Null
  approver_status?: String | Null
  approved_date?: DateTime | Null
  rejected_date?: DateTime | Null
  approver_comments?: String | Null
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  indent_request_details?: indent_request_detailsUncheckedCreateNestedManyWithoutIndent_request_dataInput
  purchase_request?: purchase_requestUncheckedCreateNestedManyWithoutIndent_request_dataInput
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/createIndentRequest << ERRSTRING >>Error: 
Invalid `tx.indent_request.create()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\indentRequest.dao.ts:41:55

  38 
  39 const result = await transaction
  40   .$transaction(async (tx) => {
â†’ 41     const indentRequest = await tx.indent_request.create({
           data: {
             requester_user_id: 102,
             requested_date: new Date('2023-09-23T14:21:48.990Z'),
             request_status: '',
             priority: 'Medium',
             description: 'Sample site check',
             expected_delivery_date: new Date('2023-10-01T00:00:00.000Z'),
             total_cost: 1500,
             approver_user_id: undefined,
             approver_status: 'Pending',
             approved_date: null,
             rejected_date: null,
             approver_comments: undefined,
             project_id: 141,
             created_by: 102,
             site_id: 33,
             ~~~~~~~
             created_date: new Date('2023-09-23T14:22:16.790Z'),
             updated_date: new Date('2023-09-23T14:22:16.790Z'),
             is_delete: false
           }
         })

Unknown arg `site_id` in data.site_id for type indent_requestUncheckedCreateInput. Did you mean `select`? Available args:
type indent_requestUncheckedCreateInput {
  indent_request_id?: Int
  project_id?: Int | Null
  requester_user_id: Int
  requested_date: DateTime
  request_status?: String | Null
  priority?: String | Null
  description?: String | Null
  expected_delivery_date?: DateTime | Null
  total_cost?: Float | Null
  approver_user_id?: Int | Null
  approver_status?: String | Null
  approved_date?: DateTime | Null
  rejected_date?: DateTime | Null
  approver_comments?: String | Null
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  indent_request_details?: indent_request_detailsUncheckedCreateNestedManyWithoutIndent_request_dataInput
  purchase_request?: purchase_requestUncheckedCreateNestedManyWithoutIndent_request_dataInput
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/createIndentRequest << ERRSTRING >>Error: 
Invalid `tx.indent_request.create()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\indentRequest.dao.ts:41:55

  38 
  39 const result = await transaction
  40   .$transaction(async (tx) => {
â†’ 41     const indentRequest = await tx.indent_request.create({
           data: {
             requester_user_id: 102,
             requested_date: new Date('2023-09-23T14:21:48.990Z'),
             request_status: '',
             priority: 'Medium',
             description: 'Sample site check',
             expected_delivery_date: new Date('2023-10-01T00:00:00.000Z'),
             total_cost: 1500,
             approver_user_id: undefined,
             approver_status: 'Pending',
             approved_date: null,
             rejected_date: null,
             approver_comments: undefined,
             project_id: 141,
             created_by: 102,
             site_id: 33,
             ~~~~~~~
             created_date: new Date('2023-09-23T14:22:26.224Z'),
             updated_date: new Date('2023-09-23T14:22:26.224Z'),
             is_delete: false
           }
         })

Unknown arg `site_id` in data.site_id for type indent_requestUncheckedCreateInput. Did you mean `select`? Available args:
type indent_requestUncheckedCreateInput {
  indent_request_id?: Int
  project_id?: Int | Null
  requester_user_id: Int
  requested_date: DateTime
  request_status?: String | Null
  priority?: String | Null
  description?: String | Null
  expected_delivery_date?: DateTime | Null
  total_cost?: Float | Null
  approver_user_id?: Int | Null
  approver_status?: String | Null
  approved_date?: DateTime | Null
  rejected_date?: DateTime | Null
  approver_comments?: String | Null
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  indent_request_details?: indent_request_detailsUncheckedCreateNestedManyWithoutIndent_request_dataInput
  purchase_request?: purchase_requestUncheckedCreateNestedManyWithoutIndent_request_dataInput
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByIndentRequestId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.indent_request.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\indentRequest.dao.ts:253:60

  250 const getById = async (indentRequestId: number, connectionObj = null) => {
  251   try {
  252     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 253     const indentRequest = await transaction.indent_request.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:328:47

  325 const getById = async (projectId: number, connectionObj = null) => {
  326   try {
  327     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 328     const project = await transaction.project.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndBomType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:328:47

  325 const getById = async (projectId: number, connectionObj = null) => {
  326   try {
  327     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 328     const project = await transaction.project.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAll << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.users.findMany()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\user.dao.ts:134:38

  131 
  132 const getAll = async (user_status) => {
  133   try {
â†’ 134     const users = await prisma.users.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllClients << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.client.findMany()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\client.dao.ts:77:45

  74 const getAll = async (connectionObj = null) => {
  75   try {
  76     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 77     const client = await transaction.client.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getUserByRoleName << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.users.findMany()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\user.dao.ts:400:43

  397 const getUserByRoleName = async (role_name: string, connectionObj = null) => {
  398   try {
  399     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 400     const users = await transaction.users.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\velavan\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchMasterData << ERRSTRING >>Error: 
Invalid `transaction.master_data.findMany()` invocation in
D:\velavan\omni-flux\apps\api\src\dao\masterData.dao.ts:255:54

  252 try {
  253   const transaction = connectionObj !== null ? connectionObj : prisma;
  254   const filter = filters.filterMasterData;
â†’ 255   const masterData = await transaction.master_data.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                project_id: 137
                ~~~~~~~~~~
              }
            ]
          },
          include: {
            parent: true,
            children: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `project_id` in where.AND.0.project_id for type master_dataWhereInput. Available args:

type master_dataWhereInput {
  AND?: master_dataWhereInput | List<master_dataWhereInput>
  OR?: List<master_dataWhereInput>
  NOT?: master_dataWhereInput | List<master_dataWhereInput>
  master_data_id?: IntFilter | Int
  master_data_name?: StringFilter | String
  master_data_description?: StringNullableFilter | String | Null
  master_data_type?: StringFilter | String
  parent_master_data_id?: IntNullableFilter | Int | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  parent?: Master_dataRelationFilter | master_dataWhereInput | Null
  children?: Master_dataListRelationFilter
  leadEnquiries?: Lead_enquiryListRelationFilter
  lead_enquiry_product?: Lead_enquiry_productListRelationFilter
  lead_enquiry_tender?: Lead_enquiry_tenderListRelationFilter
  vendor_as_vendor_category?: VendorListRelationFilter
  vendor_as_preferred_payment_method?: VendorListRelationFilter
  item?: ItemListRelationFilter
  bom_configuration?: Bom_configurationListRelationFilter
  expense_details?: Expense_detailsListRelationFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchMasterData << ERRSTRING >>Error: 
Invalid `transaction.master_data.findMany()` invocation in
D:\velavan\omni-flux\apps\api\src\dao\masterData.dao.ts:255:54

  252 try {
  253   const transaction = connectionObj !== null ? connectionObj : prisma;
  254   const filter = filters.filterMasterData;
â†’ 255   const masterData = await transaction.master_data.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                project_id: 137
                ~~~~~~~~~~
              }
            ]
          },
          include: {
            parent: true,
            children: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `project_id` in where.AND.0.project_id for type master_dataWhereInput. Available args:

type master_dataWhereInput {
  AND?: master_dataWhereInput | List<master_dataWhereInput>
  OR?: List<master_dataWhereInput>
  NOT?: master_dataWhereInput | List<master_dataWhereInput>
  master_data_id?: IntFilter | Int
  master_data_name?: StringFilter | String
  master_data_description?: StringNullableFilter | String | Null
  master_data_type?: StringFilter | String
  parent_master_data_id?: IntNullableFilter | Int | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  parent?: Master_dataRelationFilter | master_dataWhereInput | Null
  children?: Master_dataListRelationFilter
  leadEnquiries?: Lead_enquiryListRelationFilter
  lead_enquiry_product?: Lead_enquiry_productListRelationFilter
  lead_enquiry_tender?: Lead_enquiry_tenderListRelationFilter
  vendor_as_vendor_category?: VendorListRelationFilter
  vendor_as_preferred_payment_method?: VendorListRelationFilter
  item?: ItemListRelationFilter
  bom_configuration?: Bom_configurationListRelationFilter
  expense_details?: Expense_detailsListRelationFilter
}


<<<<<<< HEAD
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByParentType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.master_data.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\masterData.dao.ts:289:56

  286 ) => {
  287   try {
  288     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 289     const masterDataId = await transaction.master_data.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllRoles << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.role.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\role.dao.ts:74:41

  71 const getAll = async (connectionObj = null) => {
  72   try {
  73     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 74     const role = await transaction.role.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllClients << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.client.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\client.dao.ts:77:45

  74 const getAll = async (connectionObj = null) => {
  75   try {
  76     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 77     const client = await transaction.client.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByParentType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.master_data.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\masterData.dao.ts:301:52

  298 const masterDataIdOfType = masterDataId?.master_data_id;
  299 
  300 if (masterDataIdOfType) {
â†’ 301   const result = await transaction.master_data.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAll << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.users.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\user.dao.ts:134:38

  131 
  132 const getAll = async (user_status) => {
  133   try {
â†’ 134     const users = await prisma.users.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getUserByRoleName << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.users.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\user.dao.ts:400:43

  397 const getUserByRoleName = async (role_name: string, connectionObj = null) => {
  398   try {
  399     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 400     const users = await transaction.users.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/search << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:281:52

  278 const approver_status = filters.approver_status;
  279 
  280 const projectMemberAssociation =
â†’ 281   await transaction.project_member_association.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/deleteByProjectMemberAssociationId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project_member_association.update()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:167:52

  164 try {
  165   const transaction = connectionObj !== null ? connectionObj : prisma;
  166   const projectMemberAssociation =
â†’ 167     await transaction.project_member_association.update(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/search << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project_member_association.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\projectMemberAssociation.dao.ts:281:52

  278 const approver_status = filters.approver_status;
  279 
  280 const projectMemberAssociation =
â†’ 281   await transaction.project_member_association.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndBomType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllClients << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.client.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\client.dao.ts:77:45

  74 const getAll = async (connectionObj = null) => {
  75   try {
  76     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 77     const client = await transaction.client.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getUserByRoleName << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.users.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\user.dao.ts:400:43

  397 const getUserByRoleName = async (role_name: string, connectionObj = null) => {
  398   try {
  399     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 400     const users = await transaction.users.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAll << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.users.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\user.dao.ts:134:38

  131 
  132 const getAll = async (user_status) => {
  133   try {
â†’ 134     const users = await prisma.users.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByParentType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.master_data.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\masterData.dao.ts:289:56

  286 ) => {
  287   try {
  288     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 289     const masterDataId = await transaction.master_data.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getUserByRoleName << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.users.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\user.dao.ts:400:43

  397 const getUserByRoleName = async (role_name: string, connectionObj = null) => {
  398   try {
  399     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 400     const users = await transaction.users.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndBomType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndBomType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndBomType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getUserByRoleName << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.users.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\user.dao.ts:400:43

  397 const getUserByRoleName = async (role_name: string, connectionObj = null) => {
  398   try {
  399     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 400     const users = await transaction.users.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getUserByRoleName << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.users.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\user.dao.ts:400:43

  397 const getUserByRoleName = async (role_name: string, connectionObj = null) => {
  398   try {
  399     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 400     const users = await transaction.users.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllClients << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.client.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\client.dao.ts:77:45

  74 const getAll = async (connectionObj = null) => {
  75   try {
  76     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 77     const client = await transaction.client.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAll << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.users.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\user.dao.ts:134:38

  131 
  132 const getAll = async (user_status) => {
  133   try {
â†’ 134     const users = await prisma.users.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByParentType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.master_data.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\masterData.dao.ts:289:56

  286 ) => {
  287   try {
  288     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 289     const masterDataId = await transaction.master_data.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndBomType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
=======
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchMasterData << ERRSTRING >>Error: 
Invalid `transaction.master_data.findMany()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\masterData.dao.ts:255:54

  252 try {
  253   const transaction = connectionObj !== null ? connectionObj : prisma;
  254   const filter = filters.filterMasterData;
â†’ 255   const masterData = await transaction.master_data.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                project_id: 137
                ~~~~~~~~~~
              }
            ]
          },
          include: {
            parent: true,
            children: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `project_id` in where.AND.0.project_id for type master_dataWhereInput. Available args:

type master_dataWhereInput {
  AND?: master_dataWhereInput | List<master_dataWhereInput>
  OR?: List<master_dataWhereInput>
  NOT?: master_dataWhereInput | List<master_dataWhereInput>
  master_data_id?: IntFilter | Int
  master_data_name?: StringFilter | String
  master_data_description?: StringNullableFilter | String | Null
  master_data_type?: StringFilter | String
  parent_master_data_id?: IntNullableFilter | Int | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  parent?: Master_dataRelationFilter | master_dataWhereInput | Null
  children?: Master_dataListRelationFilter
  leadEnquiries?: Lead_enquiryListRelationFilter
  lead_enquiry_product?: Lead_enquiry_productListRelationFilter
  lead_enquiry_tender?: Lead_enquiry_tenderListRelationFilter
  vendor_as_vendor_category?: VendorListRelationFilter
  vendor_as_preferred_payment_method?: VendorListRelationFilter
  item?: ItemListRelationFilter
  bom_configuration?: Bom_configurationListRelationFilter
  expense_details?: Expense_detailsListRelationFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchMasterData << ERRSTRING >>Error: 
Invalid `transaction.master_data.findMany()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\masterData.dao.ts:255:54

  252 try {
  253   const transaction = connectionObj !== null ? connectionObj : prisma;
  254   const filter = filters.filterMasterData;
â†’ 255   const masterData = await transaction.master_data.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                project_id: 137
                ~~~~~~~~~~
              }
            ]
          },
          include: {
            parent: true,
            children: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `project_id` in where.AND.0.project_id for type master_dataWhereInput. Available args:

type master_dataWhereInput {
  AND?: master_dataWhereInput | List<master_dataWhereInput>
  OR?: List<master_dataWhereInput>
  NOT?: master_dataWhereInput | List<master_dataWhereInput>
  master_data_id?: IntFilter | Int
  master_data_name?: StringFilter | String
  master_data_description?: StringNullableFilter | String | Null
  master_data_type?: StringFilter | String
  parent_master_data_id?: IntNullableFilter | Int | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  parent?: Master_dataRelationFilter | master_dataWhereInput | Null
  children?: Master_dataListRelationFilter
  leadEnquiries?: Lead_enquiryListRelationFilter
  lead_enquiry_product?: Lead_enquiry_productListRelationFilter
  lead_enquiry_tender?: Lead_enquiry_tenderListRelationFilter
  vendor_as_vendor_category?: VendorListRelationFilter
  vendor_as_preferred_payment_method?: VendorListRelationFilter
  item?: ItemListRelationFilter
  bom_configuration?: Bom_configurationListRelationFilter
  expense_details?: Expense_detailsListRelationFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchMasterData << ERRSTRING >>Error: 
Invalid `transaction.master_data.findMany()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\masterData.dao.ts:255:54

  252 try {
  253   const transaction = connectionObj !== null ? connectionObj : prisma;
  254   const filter = filters.filterMasterData;
â†’ 255   const masterData = await transaction.master_data.findMany({
          where: {
            is_delete: false,
            AND: [
              {
                project_id: 137
                ~~~~~~~~~~
              }
            ]
          },
          include: {
            parent: true,
            children: true
          },
          orderBy: [
            {
              updated_date: 'desc'
            }
          ],
          skip: 0,
          take: 5
        })

Unknown arg `project_id` in where.AND.0.project_id for type master_dataWhereInput. Available args:

type master_dataWhereInput {
  AND?: master_dataWhereInput | List<master_dataWhereInput>
  OR?: List<master_dataWhereInput>
  NOT?: master_dataWhereInput | List<master_dataWhereInput>
  master_data_id?: IntFilter | Int
  master_data_name?: StringFilter | String
  master_data_description?: StringNullableFilter | String | Null
  master_data_type?: StringFilter | String
  parent_master_data_id?: IntNullableFilter | Int | Null
  is_delete?: BoolFilter | Boolean
  created_date?: DateTimeFilter | DateTime
  updated_date?: DateTimeFilter | DateTime
  created_by?: IntNullableFilter | Int | Null
  updated_by?: IntNullableFilter | Int | Null
  parent?: Master_dataRelationFilter | master_dataWhereInput | Null
  children?: Master_dataListRelationFilter
  leadEnquiries?: Lead_enquiryListRelationFilter
  lead_enquiry_product?: Lead_enquiry_productListRelationFilter
  lead_enquiry_tender?: Lead_enquiry_tenderListRelationFilter
  vendor_as_vendor_category?: VendorListRelationFilter
  vendor_as_preferred_payment_method?: VendorListRelationFilter
  item?: ItemListRelationFilter
  bom_configuration?: Bom_configurationListRelationFilter
  expense_details?: Expense_detailsListRelationFilter
}


>>>>>>> fdf52a1269904e75380eb2e9fe81c59ea6a3b8b8
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByCategoryId << ERRSTRING >>Error: 
Invalid `transaction.category.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\category.dao.ts:89:49

  86 const getById = async (categoryId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const category = await transaction.category.findFirst({
           where: {
             category_id: NaN,
                          ~~~
             is_delete: false
           },
           include: {
             project: true,
             bom_configuration_data: {
               include: {
                 bom_type_data: {
                   select: {
                     master_data_name: true
                   }
                 }
               }
             }
           }
         })

Argument category_id: Got invalid value NaN on prisma.findFirstcategory. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:382:47

  379 const getAll = async (connectionObj = null) => {
  380   try {
  381     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 382     const project = await transaction.project.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst({
            where: {
              project_id: NaN,
                          ~~~
              is_delete: false
            },
            include: {
              project_site: {
                include: {
                  site_details: true
                }
              },
              bom_configuration: {
                where: {
                  is_delete: false
                },
                include: {
                  bom_type_data: {
                    select: {
                      master_data_name: true
                    }
                  }
                },
                orderBy: [
                  {
                    updated_date: 'desc'
                  }
                ]
              },
              user: {
                select: {
                  first_name: true,
                  last_name: true
                }
              },
              client: {
                select: {
                  name: true
                }
              },
              approvar_data: {
                select: {
                  first_name: true,
                  last_name: true
                }
              }
            }
          })

Argument project_id: Got invalid value NaN on prisma.findFirstproject. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst({
            where: {
              project_id: NaN,
                          ~~~
              is_delete: false
            },
            include: {
              project_site: {
                include: {
                  site_details: true
                }
              },
              bom_configuration: {
                where: {
                  is_delete: false
                },
                include: {
                  bom_type_data: {
                    select: {
                      master_data_name: true
                    }
                  }
                },
                orderBy: [
                  {
                    updated_date: 'desc'
                  }
                ]
              },
              user: {
                select: {
                  first_name: true,
                  last_name: true
                }
              },
              client: {
                select: {
                  name: true
                }
              },
              approvar_data: {
                select: {
                  first_name: true,
                  last_name: true
                }
              }
            }
          })

Argument project_id: Got invalid value NaN on prisma.findFirstproject. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst({
            where: {
              project_id: NaN,
                          ~~~
              is_delete: false
            },
            include: {
              project_site: {
                include: {
                  site_details: true
                }
              },
              bom_configuration: {
                where: {
                  is_delete: false
                },
                include: {
                  bom_type_data: {
                    select: {
                      master_data_name: true
                    }
                  }
                },
                orderBy: [
                  {
                    updated_date: 'desc'
                  }
                ]
              },
              user: {
                select: {
                  first_name: true,
                  last_name: true
                }
              },
              client: {
                select: {
                  name: true
                }
              },
              approvar_data: {
                select: {
                  first_name: true,
                  last_name: true
                }
              }
            }
          })

Argument project_id: Got invalid value NaN on prisma.findFirstproject. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst({
            where: {
              project_id: NaN,
                          ~~~
              is_delete: false
            },
            include: {
              project_site: {
                include: {
                  site_details: true
                }
              },
              bom_configuration: {
                where: {
                  is_delete: false
                },
                include: {
                  bom_type_data: {
                    select: {
                      master_data_name: true
                    }
                  }
                },
                orderBy: [
                  {
                    updated_date: 'desc'
                  }
                ]
              },
              user: {
                select: {
                  first_name: true,
                  last_name: true
                }
              },
              client: {
                select: {
                  name: true
                }
              },
              approvar_data: {
                select: {
                  first_name: true,
                  last_name: true
                }
              }
            }
          })

Argument project_id: Got invalid value NaN on prisma.findFirstproject. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByPurchaseOrderId << ERRSTRING >>Error: 
Invalid `transaction.purchase_order.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:89:60

  86 const getById = async (purchaseOrderId: number, connectionObj = null) => {
  87   try {
  88     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 89     const purchaseOrder = await transaction.purchase_order.findFirst({
           where: {
             purchase_order_id: NaN,
                                ~~~
             is_delete: false
           },
           include: {
             purchase_request_data: {
               include: {
                 indent_request_data: true
               }
             },
             vendor_data: true
           }
         })

Argument purchase_order_id: Got invalid value NaN on prisma.findFirstpurchase_order. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>Error: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\September\20\erp\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst({
            where: {
              project_id: NaN,
                          ~~~
              is_delete: false
            },
            include: {
              project_site: {
                include: {
                  site_details: true
                }
              },
              bom_configuration: {
                where: {
                  is_delete: false
                },
                include: {
                  bom_type_data: {
                    select: {
                      master_data_name: true
                    }
                  }
                },
                orderBy: [
                  {
                    updated_date: 'desc'
                  }
                ]
              },
              user: {
                select: {
                  first_name: true,
                  last_name: true
                }
              },
              client: {
                select: {
                  name: true
                }
              },
              approvar_data: {
                select: {
                  first_name: true,
                  last_name: true
                }
              }
            }
          })

Argument project_id: Got invalid value NaN on prisma.findFirstproject. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


