[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\Jegan\ERP\2023\Sep\30\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchExpense << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.expense.findMany()` invocation in
D:\Jegan\ERP\2023\Sep\30\omni-flux\apps\api\src\dao\expense.dao.ts:370:47

  367 try {
  368   const transaction = connectionObj !== null ? connectionObj : prisma;
  369   const filter = filters.filterExpense;
â†’ 370   const expense = await transaction.expense.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchExpense << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.expense.findMany()` invocation in
D:\Jegan\ERP\2023\Sep\30\omni-flux\apps\api\src\dao\expense.dao.ts:370:47

  367 try {
  368   const transaction = connectionObj !== null ? connectionObj : prisma;
  369   const filter = filters.filterExpense;
â†’ 370   const expense = await transaction.expense.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\Jegan\ERP\2023\Sep\30\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchExpense << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.expense.findMany()` invocation in
D:\Jegan\ERP\2023\Sep\30\omni-flux\apps\api\src\dao\expense.dao.ts:370:47

  367 try {
  368   const transaction = connectionObj !== null ? connectionObj : prisma;
  369   const filter = filters.filterExpense;
â†’ 370   const expense = await transaction.expense.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchExpense << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.expense.findMany()` invocation in
D:\Jegan\ERP\2023\Sep\30\omni-flux\apps\api\src\dao\expense.dao.ts:370:47

  367 try {
  368   const transaction = connectionObj !== null ? connectionObj : prisma;
  369   const filter = filters.filterExpense;
â†’ 370   const expense = await transaction.expense.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createExpense << ERRSTRING >>Error: 
Invalid `transaction.expense.create()` invocation in
D:\Jegan\ERP\2023\Sep\30\omni-flux\apps\api\src\dao\expense.dao.ts:40:47

  37   expenseCodeGeneratorQuery
  38 );
  39 
â†’ 40 const expense = await transaction.expense.create({
       data: {
         expense_code: 'EXP20230069',
         site_id: 17,
         project_id: 141,
         employee_name: 'Vijay Perumalsamy',
         employee_id: '',
         employee_phone: '8667604201',
         purpose: '',
         department: '',
         designation: '',
         total_amount: '0222222',
                       ~~~~~~~~~
         bill_details: [],
         status: 'Draft',
         start_date: null,
         end_date: null,
         bill_date: new Date('2023-10-14T00:00:00.000Z'),
         is_delete: false,
         created_by: 1,
         created_date: new Date('2023-10-14T04:42:39.720Z'),
         updated_date: new Date('2023-10-14T04:42:39.720Z')
       }
     })

Argument total_amount: Got invalid value '0222222' on prisma.createOneexpense. Provided String, expected Float or Null.


[31merror[39m: ERRORS: status code: Error << DETAILS >>/createExpense << ERRSTRING >>Error: 
Invalid `transaction.expense.create()` invocation in
D:\Jegan\ERP\2023\Sep\30\omni-flux\apps\api\src\dao\expense.dao.ts:40:47

  37   expenseCodeGeneratorQuery
  38 );
  39 
â†’ 40 const expense = await transaction.expense.create({
       data: {
         expense_code: 'EXP20230070',
         site_id: 17,
         project_id: 141,
         employee_name: 'Vijay Perumalsamy',
         employee_id: '',
         employee_phone: '8667604201',
         purpose: '',
         department: '',
         designation: '',
         total_amount: '0222222',
                       ~~~~~~~~~
         bill_details: [],
         status: 'Draft',
         start_date: null,
         end_date: null,
         bill_date: new Date('2023-10-14T00:00:00.000Z'),
         is_delete: false,
         created_by: 1,
         created_date: new Date('2023-10-14T04:42:49.152Z'),
         updated_date: new Date('2023-10-14T04:42:49.152Z')
       }
     })

Argument total_amount: Got invalid value '0222222' on prisma.createOneexpense. Provided String, expected Float or Null.


[31merror[39m: ERRORS: status code: Error << DETAILS >>/createExpense << ERRSTRING >>Error: 
Invalid `transaction.expense.create()` invocation in
D:\Jegan\ERP\2023\Sep\30\omni-flux\apps\api\src\dao\expense.dao.ts:40:47

  37   expenseCodeGeneratorQuery
  38 );
  39 
â†’ 40 const expense = await transaction.expense.create({
       data: {
         expense_code: 'EXP20230071',
         site_id: 17,
         project_id: 141,
         employee_name: 'Vijay Perumalsamy',
         employee_id: '',
         employee_phone: '8667604201',
         purpose: '',
         department: '',
         designation: '',
         total_amount: '0222222',
                       ~~~~~~~~~
         bill_details: [],
         status: 'Draft',
         start_date: null,
         end_date: null,
         bill_date: new Date('2023-10-14T00:00:00.000Z'),
         is_delete: false,
         created_by: 1,
         created_date: new Date('2023-10-14T04:43:10.747Z'),
         updated_date: new Date('2023-10-14T04:43:10.747Z')
       }
     })

Argument total_amount: Got invalid value '0222222' on prisma.createOneexpense. Provided String, expected Float or Null.


[31merror[39m: ERRORS: status code: Error << DETAILS >>/createExpense << ERRSTRING >>Error: 
Invalid `transaction.expense_details.create()` invocation in
D:\Jegan\ERP\2023\Sep\30\omni-flux\apps\api\src\dao\expense.dao.ts:82:68

  79 const unit_value = expenseDetail.unit_value;
  80 
  81 if (is_delete === false) {
â†’ 82   const newExpenseDetail = await transaction.expense_details.create({
         data: {
           expense_id: 65,
           expense_data_id: 132,
           total: '22',
                  ~~~~
           bill_details: [],
           created_by: 1,
           created_date: new Date('2023-10-14T04:44:41.086Z'),
           updated_date: new Date('2023-10-14T04:44:41.086Z'),
           is_delete: false,
           status: 'Pending',
           comments: undefined,
           progressed_date: undefined,
           progressed_by: undefined,
           bill_number: '',
           description: 'Internet reimbursment April',
           quantity: undefined,
           unit_value: undefined
         }
       })

Argument total: Got invalid value '22' on prisma.createOneexpense_details. Provided String, expected Float or Null.


[31merror[39m: ERRORS: status code: Error << DETAILS >>/createExpense << ERRSTRING >>Error: 
Invalid `transaction.expense_details.create()` invocation in
D:\Jegan\ERP\2023\Sep\30\omni-flux\apps\api\src\dao\expense.dao.ts:82:68

  79 const unit_value = expenseDetail.unit_value;
  80 
  81 if (is_delete === false) {
â†’ 82   const newExpenseDetail = await transaction.expense_details.create({
         data: {
           expense_id: 66,
           expense_data_id: 132,
           total: '22',
                  ~~~~
           bill_details: [],
           created_by: 1,
           created_date: new Date('2023-10-14T04:45:58.436Z'),
           updated_date: new Date('2023-10-14T04:45:58.436Z'),
           is_delete: false,
           status: 'Pending',
           comments: undefined,
           progressed_date: undefined,
           progressed_by: undefined,
           bill_number: '',
           description: 'Internet reimbursment April',
           quantity: undefined,
           unit_value: undefined
         }
       })

Argument total: Got invalid value '22' on prisma.createOneexpense_details. Provided String, expected Float or Null.


<<<<<<< HEAD
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByUserId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByUserId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `prisma.users.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\user.dao.ts:82:37

  79 
  80 const getById = async (userId: number) => {
  81   try {
â†’ 82     const user = await prisma.users.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchExpense << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.expense.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\expense.dao.ts:370:47

  367 try {
  368   const transaction = connectionObj !== null ? connectionObj : prisma;
  369   const filter = filters.filterExpense;
â†’ 370   const expense = await transaction.expense.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchExpense << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.expense.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\expense.dao.ts:370:47

  367 try {
  368   const transaction = connectionObj !== null ? connectionObj : prisma;
  369   const filter = filters.filterExpense;
â†’ 370   const expense = await transaction.expense.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStockAudit << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.stock_audit.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\stockAudit.dao.ts:139:54

  136 try {
  137   const transaction = connectionObj !== null ? connectionObj : prisma;
  138   const filter = filters.filterStockAudit;
â†’ 139   const stockAudit = await transaction.stock_audit.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByStockAuditId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.stock_audit.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\stockAudit.dao.ts:75:54

  72 const getById = async (stockAuditId: number, connectionObj = null) => {
  73   try {
  74     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 75     const stockAudit = await transaction.stock_audit.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByStockAuditId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.stock_audit.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\stockAudit.dao.ts:75:54

  72 const getById = async (stockAuditId: number, connectionObj = null) => {
  73   try {
  74     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 75     const stockAudit = await transaction.stock_audit.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByStockAuditId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.stock_audit.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\stockAudit.dao.ts:75:54

  72 const getById = async (stockAuditId: number, connectionObj = null) => {
  73   try {
  74     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 75     const stockAudit = await transaction.stock_audit.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStockAudit << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.stock_audit.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\stockAudit.dao.ts:139:54

  136 try {
  137   const transaction = connectionObj !== null ? connectionObj : prisma;
  138   const filter = filters.filterStockAudit;
â†’ 139   const stockAudit = await transaction.stock_audit.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchByUserId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:577:47

  574 try {
  575   const transaction = connectionObj !== null ? connectionObj : prisma;
  576   const filter = filters.filterProject;
â†’ 577   const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchByUserId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:577:47

  574 try {
  575   const transaction = connectionObj !== null ? connectionObj : prisma;
  576   const filter = filters.filterProject;
â†’ 577   const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchByUserId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:577:47

  574 try {
  575   const transaction = connectionObj !== null ? connectionObj : prisma;
  576   const filter = filters.filterProject;
â†’ 577   const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchByUserId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:577:47

  574 try {
  575   const transaction = connectionObj !== null ? connectionObj : prisma;
  576   const filter = filters.filterProject;
â†’ 577   const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchByUserId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:577:47

  574 try {
  575   const transaction = connectionObj !== null ? connectionObj : prisma;
  576   const filter = filters.filterProject;
â†’ 577   const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchByUserId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:577:47

  574 try {
  575   const transaction = connectionObj !== null ? connectionObj : prisma;
  576   const filter = filters.filterProject;
â†’ 577   const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchByUserId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:577:47

  574 try {
  575   const transaction = connectionObj !== null ? connectionObj : prisma;
  576   const filter = filters.filterProject;
â†’ 577   const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchExpense << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.expense.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\expense.dao.ts:370:47

  367 try {
  368   const transaction = connectionObj !== null ? connectionObj : prisma;
  369   const filter = filters.filterExpense;
â†’ 370   const expense = await transaction.expense.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchExpense << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.expense.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\expense.dao.ts:370:47

  367 try {
  368   const transaction = connectionObj !== null ? connectionObj : prisma;
  369   const filter = filters.filterExpense;
â†’ 370   const expense = await transaction.expense.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStockAudit << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.stock_audit.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\stockAudit.dao.ts:139:54

  136 try {
  137   const transaction = connectionObj !== null ? connectionObj : prisma;
  138   const filter = filters.filterStockAudit;
â†’ 139   const stockAudit = await transaction.stock_audit.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchExpense << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.expense.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\expense.dao.ts:370:47

  367 try {
  368   const transaction = connectionObj !== null ? connectionObj : prisma;
  369   const filter = filters.filterExpense;
â†’ 370   const expense = await transaction.expense.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchProjectSite << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project_site.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\projectSite.dao.ts:192:56

  189 try {
  190   const transaction = connectionObj !== null ? connectionObj : prisma;
  191   const filter = filters.filterProjectSite;
â†’ 192   const projectSite = await transaction.project_site.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStockOutward << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.stock_outward.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\stockOutward.dao.ts:299:58

  296 try {
  297   const transaction = connectionObj !== null ? connectionObj : prisma;
  298   const filter = filters.filterStockOutward;
â†’ 299   const stockOutward = await transaction.stock_outward.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStockOutward << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.stock_outward.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\stockOutward.dao.ts:299:58

  296 try {
  297   const transaction = connectionObj !== null ? connectionObj : prisma;
  298   const filter = filters.filterStockOutward;
â†’ 299   const stockOutward = await transaction.stock_outward.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStockAudit << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.stock_audit.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\stockAudit.dao.ts:139:54

  136 try {
  137   const transaction = connectionObj !== null ? connectionObj : prisma;
  138   const filter = filters.filterStockAudit;
â†’ 139   const stockAudit = await transaction.stock_audit.findMany(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchStockAudit << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.stock_audit.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\stockAudit.dao.ts:139:54

  136 try {
  137   const transaction = connectionObj !== null ? connectionObj : prisma;
  138   const filter = filters.filterStockAudit;
â†’ 139   const stockAudit = await transaction.stock_audit.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 21)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectId << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\project.dao.ts:329:47

  326 const getById = async (projectId: number, connectionObj = null) => {
  327   try {
  328     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 329     const project = await transaction.project.findFirst(
Can't reach database server at `3.108.30.2`:`5432`

Please make sure your database server is running at `3.108.30.2`:`5432`.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createStockAudit << ERRSTRING >>Error: 
Invalid `transaction.stock_audit.create()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\stockAudit.dao.ts:18:54

  15   ? new Date(stock_audit_date)
  16   : null;
  17 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 18 const stockAudit = await transaction.stock_audit.create({
       data: {
         project_id: 137,
         ~~~~~~~~~~
         site_id: '',
         ~~~~~~~
         stock_audit_date: new Date('2023-10-12T00:00:00.000Z'),
         item_details: [
           {
             item_name: 'Fly ash',
             quantity: '2'
           },
           {
             item_name: 'Electric wire',
             quantity: ''
           },
           {
             item_name: 'Green cement',
             quantity: '6'
           },
           {
             item_name: 'TMT Rod',
             quantity: ''
           },
           {
             item_name: 'Pipe',
             quantity: '4'
           },
           {
             item_name: 'Paint',
             quantity: ''
           },
           {
             item_name: 'Stone',
             quantity: ''
           }
         ],
         created_by: 1,
         created_date: new Date('2023-10-12T13:01:49.953Z'),
         updated_date: new Date('2023-10-12T13:01:49.953Z'),
         is_delete: false
       }
     })

Unknown arg `project_id` in data.project_id for type stock_auditCreateInput. Did you mean `project_data`? Available args:
type stock_auditCreateInput {
  stock_audit_date?: DateTime | Null
  item_details?: NullableJsonNullValueInput | Json
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  project_data?: projectCreateNestedOneWithoutStock_auditInput
  site_data?: site_contractorCreateNestedOneWithoutStock_auditInput
}
Unknown arg `site_id` in data.site_id for type stock_auditCreateInput. Did you mean `site_data`? Available args:
type stock_auditCreateInput {
  stock_audit_date?: DateTime | Null
  item_details?: NullableJsonNullValueInput | Json
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  project_data?: projectCreateNestedOneWithoutStock_auditInput
  site_data?: site_contractorCreateNestedOneWithoutStock_auditInput
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/createStockAudit << ERRSTRING >>Error: 
Invalid `transaction.stock_audit.create()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\stockAudit.dao.ts:18:54

  15   ? new Date(stock_audit_date)
  16   : null;
  17 const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 18 const stockAudit = await transaction.stock_audit.create({
       data: {
         project_id: 137,
         ~~~~~~~~~~
         site_id: '',
         ~~~~~~~
         stock_audit_date: new Date('2023-10-12T00:00:00.000Z'),
         item_details: [
           {
             item_name: 'Fly ash',
             quantity: '1'
           },
           {
             item_name: 'Electric wire',
             quantity: '1'
           },
           {
             item_name: 'Green cement',
             quantity: '1'
           },
           {
             item_name: 'TMT Rod',
             quantity: '1'
           },
           {
             item_name: 'Pipe',
             quantity: ''
           },
           {
             item_name: 'Paint',
             quantity: ''
           },
           {
             item_name: 'Stone',
             quantity: ''
           }
         ],
         created_by: 1,
         created_date: new Date('2023-10-12T13:11:04.731Z'),
         updated_date: new Date('2023-10-12T13:11:04.731Z'),
         is_delete: false
       }
     })

Unknown arg `project_id` in data.project_id for type stock_auditCreateInput. Did you mean `project_data`? Available args:
type stock_auditCreateInput {
  stock_audit_date?: DateTime | Null
  item_details?: NullableJsonNullValueInput | Json
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  project_data?: projectCreateNestedOneWithoutStock_auditInput
  site_data?: site_contractorCreateNestedOneWithoutStock_auditInput
}
Unknown arg `site_id` in data.site_id for type stock_auditCreateInput. Did you mean `site_data`? Available args:
type stock_auditCreateInput {
  stock_audit_date?: DateTime | Null
  item_details?: NullableJsonNullValueInput | Json
  is_delete?: Boolean
  created_date?: DateTime
  updated_date: DateTime
  created_by?: Int | Null
  updated_by?: Int | Null
  project_data?: projectCreateNestedOneWithoutStock_auditInput
  site_data?: site_contractorCreateNestedOneWithoutStock_auditInput
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByProjectIdAndSiteId << ERRSTRING >>Error: 
Invalid `transaction.site_contractor.findFirst()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\siteContractor.dao.ts:276:62

  273 const getBySiteId = async (getBySiteId: number, connectionObj = null) => {
  274   try {
  275     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 276     const siteContractor = await transaction.site_contractor.findFirst({
            where: {
              site_contractor_id: NaN,
                                  ~~~
              type: 'Site',
              is_delete: false
            }
          })

Argument site_contractor_id: Got invalid value NaN on prisma.findFirstsite_contractor. Provided Float, expected IntFilter or Int:
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}
type IntFilter {
  equals?: Int
  in?: List<Int> | Int
  notIn?: List<Int> | Int
  lt?: Int
  lte?: Int
  gt?: Int
  gte?: Int
  not?: Int | NestedIntFilter
}


[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchMasterData << ERRSTRING >>PrismaClientUnknownRequestError: 
Invalid `transaction.master_data.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\masterData.dao.ts:255:54

  252 try {
  253   const transaction = connectionObj !== null ? connectionObj : prisma;
  254   const filter = filters.filterMasterData;
â†’ 255   const masterData = await transaction.master_data.findMany(
Error in query graph construction: AssertionError("Invalid value for skip argument: Value can only be positive, found: -1")
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchMasterData << ERRSTRING >>PrismaClientUnknownRequestError: 
Invalid `transaction.master_data.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\masterData.dao.ts:255:54

  252 try {
  253   const transaction = connectionObj !== null ? connectionObj : prisma;
  254   const filter = filters.filterMasterData;
â†’ 255   const masterData = await transaction.master_data.findMany(
Error in query graph construction: AssertionError("Invalid value for skip argument: Value can only be positive, found: -1")
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchMasterData << ERRSTRING >>PrismaClientUnknownRequestError: 
Invalid `transaction.master_data.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\masterData.dao.ts:255:54

  252 try {
  253   const transaction = connectionObj !== null ? connectionObj : prisma;
  254   const filter = filters.filterMasterData;
â†’ 255   const masterData = await transaction.master_data.findMany(
Error in query graph construction: AssertionError("Invalid value for skip argument: Value can only be positive, found: -1")
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchMasterData << ERRSTRING >>PrismaClientUnknownRequestError: 
Invalid `transaction.master_data.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\masterData.dao.ts:255:54

  252 try {
  253   const transaction = connectionObj !== null ? connectionObj : prisma;
  254   const filter = filters.filterMasterData;
â†’ 255   const masterData = await transaction.master_data.findMany(
Error in query graph construction: AssertionError("Invalid value for skip argument: Value can only be positive, found: -1")
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchMasterData << ERRSTRING >>PrismaClientUnknownRequestError: 
Invalid `transaction.master_data.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\masterData.dao.ts:255:54

  252 try {
  253   const transaction = connectionObj !== null ? connectionObj : prisma;
  254   const filter = filters.filterMasterData;
â†’ 255   const masterData = await transaction.master_data.findMany(
Error in query graph construction: AssertionError("Invalid value for skip argument: Value can only be positive, found: -10")
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchMasterData << ERRSTRING >>PrismaClientUnknownRequestError: 
Invalid `transaction.master_data.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\masterData.dao.ts:255:54

  252 try {
  253   const transaction = connectionObj !== null ? connectionObj : prisma;
  254   const filter = filters.filterMasterData;
â†’ 255   const masterData = await transaction.master_data.findMany(
Error in query graph construction: AssertionError("Invalid value for skip argument: Value can only be positive, found: -10")
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchMasterData << ERRSTRING >>PrismaClientUnknownRequestError: 
Invalid `transaction.master_data.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\masterData.dao.ts:255:54

  252 try {
  253   const transaction = connectionObj !== null ? connectionObj : prisma;
  254   const filter = filters.filterMasterData;
â†’ 255   const masterData = await transaction.master_data.findMany(
Error in query graph construction: AssertionError("Invalid value for skip argument: Value can only be positive, found: -10")
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchMasterData << ERRSTRING >>PrismaClientUnknownRequestError: 
Invalid `transaction.master_data.findMany()` invocation in
D:\2023\Oct\Master Data 05\omni-flux\apps\api\src\dao\masterData.dao.ts:255:54

  252 try {
  253   const transaction = connectionObj !== null ? connectionObj : prisma;
  254   const filter = filters.filterMasterData;
â†’ 255   const masterData = await transaction.master_data.findMany(
Error in query graph construction: AssertionError("Invalid value for skip argument: Value can only be positive, found: -10")
=======
[31merror[39m: ERRORS: status code: Error << DETAILS >>/processFileUpload << ERRSTRING >>TypeError: files.file is not iterable
>>>>>>> 92a2ef7a64e38324990012b0b18578bc60414136
[31merror[39m: ERRORS: status code: Error << DETAILS >>/createStockOutward << ERRSTRING >>Error: 
Invalid `transaction.project_inventory.update()` invocation in
D:\Jegan\ERP\2023\Sep\30\omni-flux\apps\api\src\dao\projectInventory.dao.ts:226:66

  223 try {
  224   const currentDate = new Date();
  225   const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 226   const projectInventory = await transaction.project_inventory.update({
          where: {
        ?   project_inventory_id?: Int
          },
          data: {
            available_quantity: NaN,
                                ~~~
            updated_by: 1,
            total_cost: NaN,
            updated_date: new Date('2023-10-14T10:48:46.575Z')
          }
        })

Argument where of type project_inventoryWhereUniqueInput needs at least one argument. Available args are listed in green.
Argument available_quantity: Got invalid value NaN on prisma.updateOneproject_inventory. Provided Float, expected Int or NullableIntFieldUpdateOperationsInput or Null.

Note: Lines with ? are optional.

[31merror[39m: ERRORS: status code: Error << DETAILS >>/createStockOutward << ERRSTRING >>Error: 
Invalid `transaction.project_inventory.update()` invocation in
D:\Jegan\ERP\2023\Sep\30\omni-flux\apps\api\src\dao\projectInventory.dao.ts:226:66

  223 try {
  224   const currentDate = new Date();
  225   const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 226   const projectInventory = await transaction.project_inventory.update({
          where: {
        ?   project_inventory_id?: Int
          },
          data: {
            available_quantity: NaN,
                                ~~~
            updated_by: 1,
            total_cost: NaN,
            updated_date: new Date('2023-10-14T10:49:39.449Z')
          }
        })

Argument where of type project_inventoryWhereUniqueInput needs at least one argument. Available args are listed in green.
Argument available_quantity: Got invalid value NaN on prisma.updateOneproject_inventory. Provided Float, expected Int or NullableIntFieldUpdateOperationsInput or Null.

Note: Lines with ? are optional.

[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllVendor << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.vendor.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\vendor.dao.ts:131:45

  128 const getAll = async (connectionObj = null) => {
  129   try {
  130     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 131     const vendor = await transaction.vendor.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.bom_detail.create()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\bomDetail.dao.ts:443:56

  440     bomData.push(bomResult);
  441   }
  442 } else if (is_delete === false) {
â†’ 443   const bomResult = await transaction.bom_detail.create(
Transaction API error: Transaction already closed: Could not perform operation.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.sub_category.update()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\subCategory.dao.ts:413:63

  410 try {
  411   const transaction = connectionObj ? connectionObj : prisma;
  412   const currentDate = new Date();
â†’ 413   const subCategoryDetails = await transaction.sub_category.update(
Transaction API error: Transaction already closed: Could not perform operation.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.bom_detail.create()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\bomDetail.dao.ts:443:56

  440     bomData.push(bomResult);
  441   }
  442 } else if (is_delete === false) {
â†’ 443   const bomResult = await transaction.bom_detail.create(
Transaction API error: Transaction already closed: Could not perform operation.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.bom_detail.create()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\bomDetail.dao.ts:443:56

  440     bomData.push(bomResult);
  441   }
  442 } else if (is_delete === false) {
â†’ 443   const bomResult = await transaction.bom_detail.create(
Transaction API error: Transaction already closed: Could not perform operation.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.sub_category.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\subCategory.dao.ts:568:56

  565 ) => {
  566   try {
  567     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 568     const subCategory = await transaction.sub_category.findFirst(
Transaction API error: Transaction already closed: A query cannot be executed on an expired transaction. The timeout for this transaction was 5000 ms, however 5156 ms passed since the start of the transaction. Consider increasing the interactive transaction timeout or doing less work in the transaction.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/addBulkBom << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.bom_detail.aggregate()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\bomDetail.dao.ts:559:46

  556 ) => {
  557   try {
  558     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 559     const bom = await transaction.bom_detail.aggregate(
Transaction API error: Transaction already closed: Could not perform operation.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByParentType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.master_data.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\masterData.dao.ts:289:56

  286 ) => {
  287   try {
  288     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 289     const masterDataId = await transaction.master_data.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getByParentType << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.master_data.findFirst()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\masterData.dao.ts:289:56

  286 ) => {
  287   try {
  288     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 289     const masterDataId = await transaction.master_data.findFirst(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchPurchaseOrder << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.purchase_order.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:177:60

  174 try {
  175   const transaction = connectionObj !== null ? connectionObj : prisma;
  176   const filter = filters.filterPurchaseOrder;
â†’ 177   const purchaseOrder = await transaction.purchase_order.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getDashboard << ERRSTRING >>Error: read ECONNRESET
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/searchPurchaseOrder << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.purchase_order.count()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\purchaseOrder.dao.ts:197:65

  194   skip: offset,
  195   take: limit,
  196 });
â†’ 197 const purchaseOrderCount = await transaction.purchase_order.count(
Server has closed the connection.
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Error converting field "bom_name" of expected non-nullable type "String", found incompatible value of "null".
[31merror[39m: ERRORS: status code: Error << DETAILS >>/getAllProject << ERRSTRING >>PrismaClientKnownRequestError: 
Invalid `transaction.project.findMany()` invocation in
D:\ERP\project\omni-flux\apps\api\src\dao\project.dao.ts:388:47

  385 const getAll = async (connectionObj = null) => {
  386   try {
  387     const transaction = connectionObj !== null ? connectionObj : prisma;
â†’ 388     const project = await transaction.project.findMany(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 9)
