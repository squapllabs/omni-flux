pipeline {
    agent any
    stages {
        stage('checkout code'){
            steps {
                checkout([$class: 'GitSCM',
                branches: [[name: '*/CICD-Test']],
                extensions: scm.extensions,
                userRemoteConfigs: [[
                    url: 'git@github.com:squapllabs/omni-flux.git',
                    credentialsId: 'GitCredentials'
                ]]
            ])
            echo 'git checkout completed'
            }
		}
      
    // stage('File copy and remove') {
      //  steps {
           // sh 'zip -r /var/lib/jenkins/workspace/Omni_test1.zip /var/lib/jenkins/workspace/Omni_test1'
            // sh 'scp /var/lib/jenkins/workspace/Omni_test1.zip root@192.168.2.27:/root/omniflux_application'
           // sh 'sh /var/lib/jenkins/workspace/omniflux_deploy.sh'
       // }
    //  }
      //  stage('docker image build') {
           // steps {
              //  echo 'running docker container details'
               // sh ' docker ps'
				// sh 'whoami'
              // echo 'docker build started'
              // sh 'docker build -t omni_flux_image .'
              // echo 'docker build completed'
                   
// stage('prune Docker data') {
           // steps {
             // sh 'docker system prune -a --volumes -f'
         //  }
       // }

// stage('docker compose build') {
          //  steps {
        //     sh 'docker-compose up -d'
        //   }
     //   }
 stage('File copy and remove') {
            steps {
            \\  sh 'docker save omniflux_application_frontend omniflux_application_backend | gzip > /var/lib/jenkins/workspace/docker_compressed-images/omniflux_application_images.tar'
            \\  sh 'scp /var/lib/jenkins/workspace/docker_compressed-images/omniflux_application_images.tar root@192.168.2.25:/root/docker_compressed_images'
              sh 'sh /var/lib/jenkins/workspace/deploy_trigger.sh'
           }
       }
    }     
}

